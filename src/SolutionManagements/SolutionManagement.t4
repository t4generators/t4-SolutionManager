<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="VSLangProj" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Xml.Schema" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.ComponentModel"  #>
<#

InitializeSolution(this.Host as IServiceProvider, GenerationEnvironment);

#><#+
		
    static IServiceProvider serviceProvider;
    static EnvDTE.DTE Dte;
    static NodeSolution _sln;
    static List<KeyValuePair<string, BaseInfo>> _classes;
    static List<KeyValuePair<string, NodeProject>> _projects;
    static ILookup<string, KeyValuePair<string, BaseInfo>> _indexeclasses;
    static StringBuilder _generationEnvironment;

	public static void InitializeSolution(IServiceProvider host, StringBuilder generationEnvironment)
	{

        _generationEnvironment = generationEnvironment;
		serviceProvider = host;
		if (serviceProvider != null)
			Dte = (EnvDTE.DTE)serviceProvider.GetService(typeof(EnvDTE.DTE));
		if (Dte == null)
			throw new Exception("T4 can only execute through the Visual Studio host");
	    _sln = new NodeSolution(Dte);

        _classes = new List<KeyValuePair<string, BaseInfo>>();
        _projects = new List<KeyValuePair<string, NodeProject>>();

        ComputeClasses();
        ComputeProject();

    }

	public static NodeSolution Solution()
	{
		return _sln;
	}


	static void ComputeClasses()
    {

        NodeSolution sln = Solution();

        foreach(NodeItem file in sln.GetItem<NodeItem>())
        {

            foreach(BaseInfo cls in file.GetClassItems())
            {
                if(cls.IsCodeType)
                {
                    string key = cls.FullName;
                    if (!string.IsNullOrEmpty(key))
                    {
                        var keyValuePair = new KeyValuePair<string, BaseInfo>(cls.FullName, cls);
                        _classes.Add(keyValuePair);
                    }
                }
            }

        }

        _indexeclasses = _classes.ToLookup(cls => cls.Key);


    }

    static void ComputeProject()
    {

        NodeSolution sln = Solution();

        foreach(NodeProject file in sln.GetItem<NodeProject>())
        {
            if (!string.IsNullOrEmpty(file.Source.FullName))
            {
                var f = new FileInfo(file.Source.FullName).Directory.FullName;
                var keyValuePair = new KeyValuePair<string, NodeProject>(f, file);
                _projects.Add(keyValuePair);
            }
        }

    }

    public static NodeProject GetProjectByName(string fullpathItem)
    {

        foreach(KeyValuePair<string, NodeProject> item in _projects)
            if (fullpathItem == item.Key)
                return item.Value;

        return null;
    }

    public static IEnumerable<BaseInfo> GetObjects()
    {
        
        foreach(KeyValuePair<string, BaseInfo> k in _classes)
            yield return k.Value;

    }

    public static IEnumerable<BaseInfo> GetObjectsInheritFrom(string fullname)
    {
        foreach(KeyValuePair<string, BaseInfo> k in _classes)
        {
            if (k.Value.IsClass)
            {
                ClassInfo itemC = k.Value as ClassInfo;
                if (itemC.IsDerivedFrom(fullname))
                    yield return k.Value;
            }
            else if(k.Value.IsInterface)
            {
                InterfaceInfo itemI = k.Value as InterfaceInfo;
                if (itemI.IsDerivedFrom(fullname))
                    yield return k.Value;
            }
        }
    }


    public static IEnumerable<BaseInfo> ResolveType(TypeInfo type)
    {

		var t = type.Name;

        if (_indexeclasses.Contains(t))
        {

            IEnumerable<KeyValuePair<string, BaseInfo>> results = _indexeclasses[t];

            foreach(KeyValuePair<string, BaseInfo> k in results)
                yield return k.Value;

        }
        
        yield break;

    }

	public static class Helper
	{

		
		public static bool HasCsharpFile(NodeItem item)
		{
			if (item.KindItem == KindItem.File)
				return (Path.GetExtension(item.Filename) == ".cs");
	
			return false;
		}


		public static bool HasVbFile(NodeItem item)
		{
			if (item.KindItem == KindItem.File)
				return (Path.GetExtension(item.Filename) == ".vb");
	
			return false;
		}



		#region Path

		public static bool IsPath(EnvDTE.ProjectItem source, string path)
		{        
			string path2 = string.Join(@"\", GetPath(source));            
			return String.Equals(path, path2);        
		}

		public static IEnumerable<string> GetPath(EnvDTE.ProjectItem source)
		{

			List<string> l = new List<string>();
			
			var s = source.Collection.Parent;

			EnvDTE.ProjectItem p1 = s as EnvDTE.ProjectItem;
			if (p1 != null)
				l.AddRange(GetPath(p1));
			
			else
			{
				EnvDTE.Project p2 = s as EnvDTE.Project;
				if (p2 != null)
				{
					l.AddRange(GetPath(p2));
				}
				else
				{

				}
			}

			l.Add(source.Name);
			return l;
		}

		public static IEnumerable<string> GetPath(EnvDTE.Project source)
		{
			List<string> l = new List<string>();

			var s = source.ParentProjectItem;

			EnvDTE.ProjectItem p1 = s as EnvDTE.ProjectItem;
			if (p1 != null)
			{
				l.AddRange(GetPath(p1));
				return l;
			}

			else
			{
				EnvDTE.Project p2 = s as EnvDTE.Project;
				if (p2 != null)
				{
					l.AddRange(GetPath(p2));

				}
				else
				{

				}
			}

			l.Add(source.Name);
			return l;
		}

		#endregion

		#region Getfiles

		public static IEnumerable<EnvDTE.ProjectItem> GetFiles(EnvDTE.ProjectItems source)
		{

			foreach (EnvDTE.ProjectItem item2 in source)            
				foreach (var item3 in GetFiles(item2))                
					yield return item3;
			
		}

		public static IEnumerable<EnvDTE.ProjectItem> GetFiles(EnvDTE.ProjectItem source)
		{

			yield return source;

			 if (source.ProjectItems != null)
				foreach (EnvDTE.ProjectItem item2 in GetFiles(source.ProjectItems))                                                
					yield return item2;   
		}

		public static IEnumerable<EnvDTE.ProjectItem> GetFiles(EnvDTE.Project source)
		{

			foreach (EnvDTE.ProjectItem item in source.ProjectItems)
			{
				yield return item;

				if (item.ProjectItems != null)

					foreach (EnvDTE.ProjectItem item2 in GetFiles(item.ProjectItems))                    
							yield return item2;                        
					
			}


		}

		#endregion

		public static string GetNamespace(EnvDTE.ProjectItem source)
		{

			System.Text.StringBuilder s1 = new System.Text.StringBuilder();

			var s = source.Collection.Parent;

			EnvDTE.ProjectItem p1 = s as EnvDTE.ProjectItem;
			if (p1 != null)
				s1.Append(GetNamespace(p1));

			else
			{
				EnvDTE.Project p2 = s as EnvDTE.Project;
				if (p2 != null)
				{
					s1.Append(p2.Properties.Item("DefaultNamespace").Value.ToString());
				}
			 
			}

			if (s1.Length > 0)
				s1.Append(".");
			s1.Append(source.Name);
			return s1.ToString();

		}

		public static NodeItem CreateNodeItem(EnvDTE.ProjectItem s)
		{

			NodeItem fld = null;

			var t = s.FileNames[1] as string;
            
            if (t != null)
            {
                System.IO.FileInfo f = new System.IO.FileInfo(t);

                if (f.Exists && f.Extension.Length > 0)
                    fld = new NodeItem(s);
                else
                    fld = new NodeItemFolder(s);

            }

			return fld;

		}
	}


	public abstract class NodeItemBase
	{

		public NodeItemBase()
		{

		}

		public abstract KindItem KindItem { get; }

	}

	public enum KindItem
	{
		Solution,
		Project,
		File,
		Folder,
		VirtualFolder,
	}

	[System.Diagnostics.DebuggerDisplay("{Name}")]
	public abstract class NodeSolutionItem : NodeItemBase
	{

		protected EnvDTE.Project project;

		public NodeSolutionItem()
			: base()
		{

		}


		protected Dictionary<string, NodeItemProperty> _properties = null;
		protected INodeProperty<T> FindProperty<T>(string p)
		{
			if (_properties == null)
				BuildProperties();

			NodeItemProperty result;
			_properties.TryGetValue(p, out result);

			return new GenericNodeProperty<T>(result);

		}

		public Dictionary<string, NodeItemProperty> Properties { get { return _properties; } }

		protected virtual void BuildProperties()
		{
			_properties = new Dictionary<string, NodeItemProperty>();
			if (project != null)
			{
				try
				{
					foreach (Property item in project.Properties)
						_properties.Add(item.Name, new NodeProperty<object>(this.project, item.Name));
				}
				catch { }

			}
		}

		public NodeSolutionItem(EnvDTE.Project project)
			: base()
		{
			this.project = project;
		}

		public virtual IEnumerable<T> GetItem<T>() 
			where T : NodeSolutionItem
		{
			foreach(T item in GetItem<T>((Func<T, bool>)null))
			yield return item;
		}

		public virtual IEnumerable<T> GetItem<T>(Func<T, bool> filter) 
			where T : NodeSolutionItem
		{

			var items = project.ProjectItems;
			if (items != null)
			{
				foreach (EnvDTE.ProjectItem s in project.ProjectItems)
				{

					NodeSolutionItem fld = null;

					EnvDTE.Project proj = s.SubProject as EnvDTE.Project;

					if (proj != null)
						fld = new NodeProject(proj);

					else if (s.Kind == "{66A26720-8FB5-11D2-AA7E-00C04F688DDE}")
						fld = new NodeFolderSolution(s as EnvDTE.Project);

					else if (s.Kind == "{EA6618E8-6E24-4528-94BE-6889FE16485C}")
						fld = new NodeVirtualFolder(s as EnvDTE.Project);

					else
						fld = Helper.CreateNodeItem(s);

                    if (fld != null)
                    {
                        var f = fld as T;
                        if (f != null)
                            if (filter == null || filter(f))
                                yield return f;

                        foreach (NodeSolutionItem i2 in fld.GetItem<T>(filter))
                            yield return i2 as T;
                    }

				}

			}

		}

		public virtual string Kind
		{
			get
			{
				return project.Kind;
			}
		}


		public virtual string Name
		{
			get
			{
				return project.Name;
			}
			set
			{
				project.Name = value;
			}
		}

		public virtual DateTime GetLastAccessTime { get { return File.GetLastAccessTime(this.project.FullName); } }

		public virtual DateTime GetCreationTime { get { return File.GetCreationTime (this.project.FullName); } }

		public virtual DateTime GetLastWriteTime { get { return File.GetLastWriteTime (this.project.FullName); } }

	}

    [System.Diagnostics.DebuggerDisplay("{FullName}")]
	public class NodeVirtualFolder : NodeSolutionItem
	{
		
		public NodeVirtualFolder(EnvDTE.Project project) : base(project)
		{
			
		}

		public virtual string FullName
		{
			get
			{
				return project.FullName;
			}
		}

		public override KindItem KindItem { get { return KindItem.VirtualFolder; } }

	}

    [System.Diagnostics.DebuggerDisplay("{Name}")]
	public class NodeSolution : NodeSolutionItem
	{

		private EnvDTE.Solution solution;
		EnvDTE.DTE dte;

		public NodeSolution (EnvDTE.DTE dte) : base() 
		{
			this.dte = dte;
			this.solution = dte.Solution;
			this.BuildProperties();
		}

                
        public string ResolvePath(string path)
        {
        
            ProjectItem projectItem = this.solution.FindProjectItem(path);
        
            if (projectItem == null)
                throw new Exception(string.Format("the path '{0}' can't be resolved", path));

            // If the .tt file is not opened, open it
            if (projectItem.Document == null)
                projectItem.Open(EnvDTE.Constants.vsViewKindCode);

            var file = projectItem.FileNames[1];

            return file;

        }

		public override KindItem KindItem { get { return KindItem.Solution; } }

		public override string Name
		{
			get { return FindProperty<string>("Name").Value; }
			set { FindProperty<string>("Name").Value = value; }
		}

		public string ExtenderCATID
		{
			get { return FindProperty<string>("ExtenderCATID").Value; }
			set { FindProperty<string>("ExtenderCATID").Value = value; }
		}          

		public string ProjectDependencies
		{
			get { return FindProperty<string>("ProjectDependencies").Value; }
			set { FindProperty<string>("ProjectDependencies").Value = value; }
		}          

		public string Extender
		{
			get { return FindProperty<string>("Extender").Value; }
			set { FindProperty<string>("Extender").Value = value; }
		}       

		public string ActiveConfig
		{
			get { return FindProperty<string>("ActiveConfig").Value; }
			set { FindProperty<string>("ActiveConfig").Value = value; }
		}
			
		public string Path
		{
			get { return FindProperty<string>("Path").Value; }
			set { FindProperty<string>("Path").Value = value; }
		}

		public string ExtenderNames
		{
			get { return FindProperty<string>("ExtenderNames").Value; }
			set { FindProperty<string>("ExtenderNames").Value = value; }
		}
			
		public string Description
		{
			get { return FindProperty<string>("Description").Value; }
			set { FindProperty<string>("Description").Value = value; }
		}

		public string StartupProject
		{
			get { return FindProperty<string>("StartupProject").Value; }
			set { FindProperty<string>("StartupProject").Value = value; }
		}


		public EnvDTE.DTE GetDTE { get { return dte; } }
	   
		public IEnumerable<NodeProject> Projects
		{
			get
			{
				return GetItem<NodeProject>();
			}
		}

		public IEnumerable<NodeProject> GetProjects(Func<NodeProject, bool> filter)
		{
			return GetItem<NodeProject>(filter);
		}
		
		public override IEnumerable<T> GetItem<T>(Func<T, bool> filter)
		{

			var prjs = this.solution.Projects;
			if (prjs != null)
			{
				foreach (EnvDTE.Project project in prjs)
				{

					NodeSolutionItem fld = null;

					if (project.Kind == "{66A26720-8FB5-11D2-AA7E-00C04F688DDE}" || project.Kind == "{66A26720-8FB5-11D2-AA7E-00C04F688DDE}")
						fld = new NodeFolderSolution(project);

					else if (project.Kind == "{EA6618E8-6E24-4528-94BE-6889FE16485C}")
						fld = new NodeVirtualFolder(project);

					else
						fld = new NodeProject(project);

					var f = fld as T;
					if (f != null)
						if (filter == null || filter(f))
							yield return f;

					foreach (T item in fld.GetItem<T>(filter))
						yield return item;

				}
			}
		}


		protected override void BuildProperties()
		{
			_properties = new Dictionary<string, NodeItemProperty>();

			foreach (EnvDTE.Property item in solution.Properties)
				_properties.Add(item.Name, new NodeProperty<object>(this.solution, item.Name));

		}

	}

    [System.Diagnostics.DebuggerDisplay("{Name}")]
	public class NodeItemProperty
	{ 

		private bool? undefine = null;
		private EnvDTE.Property property;
		private EnvDTE.Properties properties;

		public NodeItemProperty(object o, string name)
		{
			Name = name;

			if ((o as EnvDTE.Solution) != null)
				this.properties = (o as EnvDTE.Solution).Properties;

			else if ((o as EnvDTE.Project) != null)
				this.properties = (o as EnvDTE.Project).Properties;

			else if ((o as EnvDTE.ProjectItem) != null)
				this.properties = (o as EnvDTE.ProjectItem).Properties;

		}

		private EnvDTE.Property SetValue()
		{

			try
			{
				property = properties.Item(Name);
				undefine = true;
				return property;
			}
			catch (Exception)
			{
				undefine = false;
			}

			return null;

		}

		public EnvDTE.Property PropertyObject { get { return undefine != null ? property : SetValue(); } }

		public string Name { get; private set; }

		private bool Undefine { get { return undefine != null ? (bool)undefine : (PropertyObject == null); } }

	}

    [System.Diagnostics.DebuggerDisplay("{Value}")]
	public class GenericNodeProperty<T> : INodeProperty<T>
	{

		NodeItemProperty _instance;
		public GenericNodeProperty(NodeItemProperty item)
		{
			this._instance = item;
		}

		public T Value
		{
			get 
			{
				if(this._instance != null && this._instance.PropertyObject != null)
					return (T)this._instance.PropertyObject.Value; 
				return default(T);
			}
			set 
			{
				if(this._instance != null && this._instance.PropertyObject != null)
					this._instance.PropertyObject.Value = Value; 
			}
		}

	}

	[System.Diagnostics.DebuggerDisplay("{Name}: {Value}")]
	public class NodeProperty<T> : NodeItemProperty, INodeProperty<T>
	{

		public NodeProperty(object o, string name)
			: base(o, name)
		{
		
		}

		public T Value
		{
			get { return PropertyObject != null ? (T)PropertyObject.Value : default(T); }
			set { PropertyObject.Value = value; }
		}

		public static implicit operator T(NodeProperty<T> property) { return property.Value; }

	}

	public interface INodeProperty<T>
	{

		T Value { get; set; }

	}

    [System.Diagnostics.DebuggerDisplay("{Name}")]
	public class NodeProject : NodeSolutionItem
	{

		public NodeProject(EnvDTE.Project project) 
			: base(project)
		{
							  

		}

        public NodeItemFolder GetFolder(string path)
        {
            
            string p = path.Replace("/", @"\");
            p = p.Trim();
            p = p.Trim('\\');

            string[] ar = p.Split('\\');

            return GetFolder(ar);

        }

        public NodeItemFolder GetFolder(string[] paths)
        {

            NodeItemFolder node = null;
            string n2 = Name;

            for(int i = 0; i < paths.Length;i++)
            {

                string n = paths[i];

                if (node == null)
                    node = this.GetItem<NodeItemFolder>(c => c.Name == n).FirstOrDefault();
                else
                    node = node.GetFolder(n);

                if (node == null)
                {

                    DirectoryInfo dir  = new DirectoryInfo(Path.Combine(LocalPath, n));
                    if (!dir.Exists)
                        dir.Create();

                    this.project.ProjectItems.AddFromDirectory(dir.FullName);

                    node = this.GetItem<NodeItemFolder>(c => c.Name == n)
                               .FirstOrDefault();

                    if (node == null)
                        throw new Exception(String.Format("{0} can't be resolved in ", n, n2));
                
                }

                n2 = n;

            }

            return node;

        }

        public CodeTypeRef CreateCodeTypeRef(string typeFullname)
        {
            return this.project.CodeModel.CreateCodeTypeRef(typeFullname);
        }

        public EnvDTE.CodeType CodeTypeFromFullName(string typeFullname)
        {
            return this.project.CodeModel.CodeTypeFromFullName(typeFullname);
        }

		public override DateTime GetLastAccessTime { get { return File.GetLastAccessTime(this.project.FullName); } }

		public override DateTime GetCreationTime { get { return File.GetCreationTime (this.project.FullName); } }

		public override DateTime GetLastWriteTime { get { return File.GetLastWriteTime (this.project.FullName); } }

		public override KindItem KindItem { get { return KindItem.Project; } }

		public string AspNetDebugging
		{
			get { return FindProperty<string>("WebApplication.AspNetDebugging").Value; }
			set { FindProperty<string>("WebApplication.AspNetDebugging").Value = value; }
		}

		public string AspnetCompilerIISMetabasePath
		{
			get { return FindProperty<string>("WebApplication.AspnetCompilerIISMetabasePath").Value; }
			set { FindProperty<string>("WebApplication.AspnetCompilerIISMetabasePath").Value = value; }
		}

		public string OutputTypeEx
		{
			get { return FindProperty<string>("OutputTypeEx").Value; }
			set { FindProperty<string>("OutputTypeEx").Value = value; }
		}

		public string TargetFrameworkMoniker
		{
			get { return FindProperty<string>("TargetFrameworkMoniker").Value; }
			set { FindProperty<string>("TargetFrameworkMoniker").Value = value; }
		}

		public string ComVisible
		{
			get { return FindProperty<string>("ComVisible").Value; }
			set { FindProperty<string>("ComVisible").Value = value; }
		}

		public string EnableSecurityDebugging
		{
			get { return FindProperty<string>("EnableSecurityDebugging").Value; }
			set { FindProperty<string>("EnableSecurityDebugging").Value = value; }
		}

		public string OptionCompare
		{
			get { return FindProperty<string>("OptionCompare").Value; }
			set { FindProperty<string>("OptionCompare").Value = value; }
		}

		public string StartupObject
		{
			get { return FindProperty<string>("StartupObject").Value; }
			set { FindProperty<string>("StartupObject").Value = value; }
		}

		public string SSLEnabled
		{
			get { return FindProperty<string>("WebApplication.SSLEnabled").Value; }
			set { FindProperty<string>("WebApplication.SSLEnabled").Value = value; }
		}

		public string UseIIS
		{
			get { return FindProperty<string>("WebApplication.UseIIS").Value; }
			set { FindProperty<string>("WebApplication.UseIIS").Value = value; }
		}

		public string ManifestCertificateThumbprint
		{
			get { return FindProperty<string>("ManifestCertificateThumbprint").Value; }
			set { FindProperty<string>("ManifestCertificateThumbprint").Value = value; }
		}

		public string Trademark
		{
			get { return FindProperty<string>("Trademark").Value; }
			set { FindProperty<string>("Trademark").Value = value; }
		}

		public string Title
		{
			get { return FindProperty<string>("Title").Value; }
			set { FindProperty<string>("Title").Value = value; }
		}

		public string StartExternalUrl
		{
			get { return FindProperty<string>("WebApplication.StartExternalUrl").Value; }
			set { FindProperty<string>("WebApplication.StartExternalUrl").Value = value; }
		}

		public string IISUrl
		{
			get { return FindProperty<string>("WebApplication.IISUrl").Value; }
			set { FindProperty<string>("WebApplication.IISUrl").Value = value; }
		}

		public string AssemblyOriginatorKeyFileType
		{
			get { return FindProperty<string>("AssemblyOriginatorKeyFileType").Value; }
			set { FindProperty<string>("AssemblyOriginatorKeyFileType").Value = value; }
		}

		public string FileName
		{
			get { return FindProperty<string>("FileName").Value; }
			set { FindProperty<string>("FileName").Value = value; }
		}

		public string WebServer
		{
			get { return FindProperty<string>("WebServer").Value; }
			set { FindProperty<string>("WebServer").Value = value; }
		}

		public string AssemblyOriginatorKeyMode
		{
			get { return FindProperty<string>("AssemblyOriginatorKeyMode").Value; }
			set { FindProperty<string>("AssemblyOriginatorKeyMode").Value = value; }
		}

		public string AssemblyKeyContainerName
		{
			get { return FindProperty<string>("AssemblyKeyContainerName").Value; }
			set { FindProperty<string>("AssemblyKeyContainerName").Value = value; }
		}

		public string WindowsAuthenticationEnabled
		{
			get { return FindProperty<string>("WebApplication.WindowsAuthenticationEnabled").Value; }
			set { FindProperty<string>("WebApplication.WindowsAuthenticationEnabled").Value = value; }
		}

		public string SecureUrl
		{
			get { return FindProperty<string>("WebApplication.SecureUrl").Value; }
			set { FindProperty<string>("WebApplication.SecureUrl").Value = value; }
		}

		public string DevelopmentServerCommandLine
		{
			get { return FindProperty<string>("WebApplication.DevelopmentServerCommandLine").Value; }
			set { FindProperty<string>("WebApplication.DevelopmentServerCommandLine").Value = value; }
		}

		public string SQLDebugging
		{
			get { return FindProperty<string>("WebApplication.SQLDebugging").Value; }
			set { FindProperty<string>("WebApplication.SQLDebugging").Value = value; }
		}

		public string StartPageUrl
		{
			get { return FindProperty<string>("WebApplication.StartPageUrl").Value; }
			set { FindProperty<string>("WebApplication.StartPageUrl").Value = value; }
		}

		public string DefaultServerDirectoryListing
		{
			get { return FindProperty<string>("WebApplication.DefaultServerDirectoryListing").Value; }
			set { FindProperty<string>("WebApplication.DefaultServerDirectoryListing").Value = value; }
		}

		public string DevelopmentServerVPath
		{
			get { return FindProperty<string>("WebApplication.DevelopmentServerVPath").Value; }
			set { FindProperty<string>("WebApplication.DevelopmentServerVPath").Value = value; }
		}

		public string DevelopmentServerPort
		{
			get { return FindProperty<string>("WebApplication.DevelopmentServerPort").Value; }
			set { FindProperty<string>("WebApplication.DevelopmentServerPort").Value = value; }
		}

		public string ProjectType
		{
			get { return FindProperty<string>("ProjectType").Value; }
			set { FindProperty<string>("ProjectType").Value = value; }
		}

		public string ReferencePath
		{
			get { return FindProperty<string>("ReferencePath").Value; }
			set { FindProperty<string>("ReferencePath").Value = value; }
		}

		public string IsUsingIISExpress
		{
			get { return FindProperty<string>("WebApplication.IsUsingIISExpress").Value; }
			set { FindProperty<string>("WebApplication.IsUsingIISExpress").Value = value; }
		}

		public string PreBuildEvent
		{
			get { return FindProperty<string>("PreBuildEvent").Value; }
			set { FindProperty<string>("PreBuildEvent").Value = value; }
		}

		public string AnonymousAuthenticationEnabled
		{
			get { return FindProperty<string>("WebApplication.AnonymousAuthenticationEnabled").Value; }
			set { FindProperty<string>("WebApplication.AnonymousAuthenticationEnabled").Value = value; }
		}

		public string SilverlightDebugging
		{
			get { return FindProperty<string>("WebApplication.SilverlightDebugging").Value; }
			set { FindProperty<string>("WebApplication.SilverlightDebugging").Value = value; }
		}

		public string StartCmdLineArguments
		{
			get { return FindProperty<string>("WebApplication.StartCmdLineArguments").Value; }
			set { FindProperty<string>("WebApplication.StartCmdLineArguments").Value = value; }
		}

		public string Copyright
		{
			get { return FindProperty<string>("Copyright").Value; }
			set { FindProperty<string>("Copyright").Value = value; }
		}

		public string ApplicationIcon
		{
			get { return FindProperty<string>("ApplicationIcon").Value; }
			set { FindProperty<string>("ApplicationIcon").Value = value; }
		}

		public string CurrentDebugUrl
		{
			get { return FindProperty<string>("WebApplication.CurrentDebugUrl").Value; }
			set { FindProperty<string>("WebApplication.CurrentDebugUrl").Value = value; }
		}

		public string ExcludedPermissions
		{
			get { return FindProperty<string>("ExcludedPermissions").Value; }
			set { FindProperty<string>("ExcludedPermissions").Value = value; }
		}

		public string RunPostBuildEvent
		{
			get { return FindProperty<string>("RunPostBuildEvent").Value; }
			set { FindProperty<string>("RunPostBuildEvent").Value = value; }
		}

		public string DefaultTargetSchema
		{
			get { return FindProperty<string>("DefaultTargetSchema").Value; }
			set { FindProperty<string>("DefaultTargetSchema").Value = value; }
		}

		public string RootNamespace
		{
			get { return FindProperty<string>("RootNamespace").Value; }
			set { FindProperty<string>("RootNamespace").Value = value; }
		}

		public string IsUsingCustomServer
		{
			get { return FindProperty<string>("WebApplication.IsUsingCustomServer").Value; }
			set { FindProperty<string>("WebApplication.IsUsingCustomServer").Value = value; }
		}

		public string ManifestTimestampUrl
		{
			get { return FindProperty<string>("ManifestTimestampUrl").Value; }
			set { FindProperty<string>("ManifestTimestampUrl").Value = value; }
		}

		public string ManifestKeyFile
		{
			get { return FindProperty<string>("ManifestKeyFile").Value; }
			set { FindProperty<string>("ManifestKeyFile").Value = value; }
		}

		public string DebugSecurityZoneURL
		{
			get { return FindProperty<string>("DebugSecurityZoneURL").Value; }
			set { FindProperty<string>("DebugSecurityZoneURL").Value = value; }
		}

		public string Product
		{
			get { return FindProperty<string>("Product").Value; }
			set { FindProperty<string>("Product").Value = value; }
		}

		public string PostBuildEvent
		{
			get { return FindProperty<string>("PostBuildEvent").Value; }
			set { FindProperty<string>("PostBuildEvent").Value = value; }
		}

		public string OptionStrict
		{
			get { return FindProperty<string>("OptionStrict").Value; }
			set { FindProperty<string>("OptionStrict").Value = value; }
		}

		public string DefaultHTMLPageLayout
		{
			get { return FindProperty<string>("DefaultHTMLPageLayout").Value; }
			set { FindProperty<string>("DefaultHTMLPageLayout").Value = value; }
		}

		public string DelaySign
		{
			get { return FindProperty<string>("DelaySign").Value; }
			set { FindProperty<string>("DelaySign").Value = value; }
		}

		public string OutputType
		{
			get { return FindProperty<string>("OutputType").Value; }
			set { FindProperty<string>("OutputType").Value = value; }
		}

		public string StartWorkingDirectory
		{
			get { return FindProperty<string>("WebApplication.StartWorkingDirectory").Value; }
			set { FindProperty<string>("WebApplication.StartWorkingDirectory").Value = value; }
		}

		public string DebugStartAction
		{
			get { return FindProperty<string>("WebApplication.DebugStartAction").Value; }
			set { FindProperty<string>("WebApplication.DebugStartAction").Value = value; }
		}

		public string NeutralResourcesLanguage
		{
			get { return FindProperty<string>("NeutralResourcesLanguage").Value; }
			set { FindProperty<string>("NeutralResourcesLanguage").Value = value; }
		}

		public string OptionExplicit
		{
			get { return FindProperty<string>("OptionExplicit").Value; }
			set { FindProperty<string>("OptionExplicit").Value = value; }
		}

		public string OutputFileName
		{
			get { return FindProperty<string>("OutputFileName").Value; }
			set { FindProperty<string>("OutputFileName").Value = value; }
		}

		public string ServerExtensionsVersion
		{
			get { return FindProperty<string>("ServerExtensionsVersion").Value; }
			set { FindProperty<string>("ServerExtensionsVersion").Value = value; }
		}

		public string NonSecureUrl
		{
			get { return FindProperty<string>("WebApplication.NonSecureUrl").Value; }
			set { FindProperty<string>("WebApplication.NonSecureUrl").Value = value; }
		}

		public new string ToString
		{
			get { return FindProperty<string>("WebApplication.ToString").Value; }
			set { FindProperty<string>("WebApplication.ToString").Value = value; }
		}

		public string AssemblyGuid
		{
			get { return FindProperty<string>("AssemblyGuid").Value; }
			set { FindProperty<string>("AssemblyGuid").Value = value; }
		}

		public string GenerateManifests
		{
			get { return FindProperty<string>("GenerateManifests").Value; }
			set { FindProperty<string>("GenerateManifests").Value = value; }
		}

		public string AssemblyVersion
		{
			get { return FindProperty<string>("AssemblyVersion").Value; }
			set { FindProperty<string>("AssemblyVersion").Value = value; }
		}

		public string Win32ResourceFile
		{
			get { return FindProperty<string>("Win32ResourceFile").Value; }
			set { FindProperty<string>("Win32ResourceFile").Value = value; }
		}

		public string Description
		{
			get { return FindProperty<string>("Description").Value; }
			set { FindProperty<string>("Description").Value = value; }
		}

		public string URL
		{
			get { return FindProperty<string>("URL").Value; }
			set { FindProperty<string>("URL").Value = value; }
		}

		public string DefaultClientScript
		{
			get { return FindProperty<string>("DefaultClientScript").Value; }
			set { FindProperty<string>("DefaultClientScript").Value = value; }
		}

		public string NativeDebugging
		{
			get { return FindProperty<string>("WebApplication.NativeDebugging").Value; }
			set { FindProperty<string>("WebApplication.NativeDebugging").Value = value; }
		}

		public string TargetFramework
		{
			get { return FindProperty<string>("TargetFramework").Value; }
			set { FindProperty<string>("TargetFramework").Value = value; }
		}

		public string SignManifests
		{
			get { return FindProperty<string>("SignManifests").Value; }
			set { FindProperty<string>("SignManifests").Value = value; }
		}

		public string OfflineURL
		{
			get { return FindProperty<string>("OfflineURL").Value; }
			set { FindProperty<string>("OfflineURL").Value = value; }
		}

		public string WebServerVersion
		{
			get { return FindProperty<string>("WebServerVersion").Value; }
			set { FindProperty<string>("WebServerVersion").Value = value; }
		}

		public string Publish
		{
			get { return FindProperty<string>("Publish").Value; }
			set { FindProperty<string>("Publish").Value = value; }
		}

		public string AssemblyType
		{
			get { return FindProperty<string>("AssemblyType").Value; }
			set { FindProperty<string>("AssemblyType").Value = value; }
		}

		public string FullPath
		{
			get { return FindProperty<string>("FullPath").Value; }
			set { FindProperty<string>("FullPath").Value = value; }
		}

		public string WebAccessMethod
		{
			get { return FindProperty<string>("WebAccessMethod").Value; }
			set { FindProperty<string>("WebAccessMethod").Value = value; }
		}

		public string UseIISExpress
		{
			get { return FindProperty<string>("WebApplication.UseIISExpress").Value; }
			set { FindProperty<string>("WebApplication.UseIISExpress").Value = value; }
		}

		public string BrowseURL
		{
			get { return FindProperty<string>("WebApplication.BrowseURL").Value; }
			set { FindProperty<string>("WebApplication.BrowseURL").Value = value; }
		}

		public string NTLMAuthentication
		{
			get { return FindProperty<string>("WebApplication.NTLMAuthentication").Value; }
			set { FindProperty<string>("WebApplication.NTLMAuthentication").Value = value; }
		}

		public string OverrideIISAppRootUrl
		{
			get { return FindProperty<string>("WebApplication.OverrideIISAppRootUrl").Value; }
			set { FindProperty<string>("WebApplication.OverrideIISAppRootUrl").Value = value; }
		}

		public string OpenedURL
		{
			get { return FindProperty<string>("WebApplication.OpenedURL").Value; }
			set { FindProperty<string>("WebApplication.OpenedURL").Value = value; }
		}

		public string AssemblyKeyProviderName
		{
			get { return FindProperty<string>("AssemblyKeyProviderName").Value; }
			set { FindProperty<string>("AssemblyKeyProviderName").Value = value; }
		}

		public string TypeComplianceDiagnostics
		{
			get { return FindProperty<string>("TypeComplianceDiagnostics").Value; }
			set { FindProperty<string>("TypeComplianceDiagnostics").Value = value; }
		}

		public string Company
		{
			get { return FindProperty<string>("Company").Value; }
			set { FindProperty<string>("Company").Value = value; }
		}

		public string ActiveFileSharePath
		{
			get { return FindProperty<string>("ActiveFileSharePath").Value; }
			set { FindProperty<string>("ActiveFileSharePath").Value = value; }
		}

		public string AssemblyOriginatorKeyFile
		{
			get { return FindProperty<string>("AssemblyOriginatorKeyFile").Value; }
			set { FindProperty<string>("AssemblyOriginatorKeyFile").Value = value; }
		}

		public string StartWebServerOnDebug
		{
			get { return FindProperty<string>("WebApplication.StartWebServerOnDebug").Value; }
			set { FindProperty<string>("WebApplication.StartWebServerOnDebug").Value = value; }
		}

		public string AutoAssignPort
		{
			get { return FindProperty<string>("WebApplication.AutoAssignPort").Value; }
			set { FindProperty<string>("WebApplication.AutoAssignPort").Value = value; }
		}

		public string ApplicationManifest
		{
			get { return FindProperty<string>("ApplicationManifest").Value; }
			set { FindProperty<string>("ApplicationManifest").Value = value; }
		}

		public string AssemblyFileVersion
		{
			get { return FindProperty<string>("AssemblyFileVersion").Value; }
			set { FindProperty<string>("AssemblyFileVersion").Value = value; }
		}

		public string AspnetVersion
		{
			get { return FindProperty<string>("AspnetVersion").Value; }
			set { FindProperty<string>("AspnetVersion").Value = value; }
		}

		public string FileSharePath
		{
			get { return FindProperty<string>("FileSharePath").Value; }
			set { FindProperty<string>("FileSharePath").Value = value; }
		}

		public string AssemblyName
		{
			get { return FindProperty<string>("AssemblyName").Value; }
			set { FindProperty<string>("AssemblyName").Value = value; }
		}

		public string EditAndContinue
		{
			get { return FindProperty<string>("WebApplication.EditAndContinue").Value; }
			set { FindProperty<string>("WebApplication.EditAndContinue").Value = value; }
		}

		public string ServerDirectoryListing
		{
			get { return FindProperty<string>("WebApplication.ServerDirectoryListing").Value; }
			set { FindProperty<string>("WebApplication.ServerDirectoryListing").Value = value; }
		}

		public virtual string LocalPath
		{
            get { return new FileInfo(this.project.FileName).Directory.FullName; }
		}

		public string DefaultNamespace
		{
			get { return FindProperty<string>("DefaultNamespace").Value; }
			set { FindProperty<string>("DefaultNamespace").Value = value; }
		}

		public string LinkRepair
		{
			get { return FindProperty<string>("LinkRepair").Value; }
			set { FindProperty<string>("LinkRepair").Value = value; }
		}

		public string StartExternalProgram
		{
			get { return FindProperty<string>("WebApplication.StartExternalProgram").Value; }
			set { FindProperty<string>("WebApplication.StartExternalProgram").Value = value; }
		}

		public string IISAppRootUrl
		{
			get { return FindProperty<string>("WebApplication.IISAppRootUrl").Value; }
			set { FindProperty<string>("WebApplication.IISAppRootUrl").Value = value; }
		}

		public string TargetZone
		{
			get { return FindProperty<string>("TargetZone").Value; }
			set { FindProperty<string>("TargetZone").Value = value; }
		}

		public string SignAssembly
		{
			get { return FindProperty<string>("SignAssembly").Value; }
			set { FindProperty<string>("SignAssembly").Value = value; }
		}

		public EnvDTE.Project Source
		{
			get 
			{
				return project;
			}
		}

		public virtual string FullName
		{
			get
			{
				return project.FullName;
			}
		}

	}

    [System.Diagnostics.DebuggerDisplay("{Name}")]
	public class NodeItemFolder : NodeItem
	{

		public NodeItemFolder(EnvDTE.ProjectItem s) : base(s)
		{
                    
		}

		public override KindItem KindItem { get { return KindItem.Folder; } }

        public NodeItemFolder GetFolder(string path)
        {
            
            string p = path.Replace("/", @"\");
            p = p.Trim();
            p = p.Trim('\\');

            string[] ar = p.Split('\\');

            return GetFolder(ar);

        }

        public NodeItemFolder GetFolder(string[] paths)
        {

            NodeItemFolder node = null;
            string n2 = Name;

            for(int i = 0; i < paths.Length;i++)
            {

                string n = paths[i];

                node = this.GetItem<NodeItemFolder>(c => c.Name == n).FirstOrDefault();

                if (node == null)
                {

                    DirectoryInfo dir  = new DirectoryInfo(Path.Combine(LocalPath, n));

                    if (!dir.Exists)
                        dir.Create();

                    this.s.ProjectItems.AddFromDirectory(dir.FullName);

                    node = this.GetItem<NodeItemFolder>(c => c.Name == n).FirstOrDefault();

                    if (node == null)
                        throw new Exception(String.Format("{0} can't be resolved in ", n, n2));
                
                }

                n2 = n;

            }

            return node;

        }

	}

    [System.Diagnostics.DebuggerDisplay("{Name}")]
	public class NodeItem : NodeSolutionItem
	{

		protected readonly EnvDTE.ProjectItem s;
		private List<BaseInfo> classes;
        private string path;

		public NodeItem(EnvDTE.ProjectItem s) : base()
		{

			this.s = s;            
            this.path = s.FileNames[1] as string;

			//Debug.WriteLine("----------------------------");
			//foreach (Property item in s.Properties)
			//{
			//    Debug.WriteLine(item.Name);
			//}
			//Debug.WriteLine("----------------------------");

			 
			//   Extension
			//   CustomToolOutput
			//   DateModified
			//   IsLink
			//   BuildAction
			//   SubType
			//   CopyToOutputDirectory
			//   IsSharedDesignTimeBuildInput
			//   ItemType
			//   IsCustomToolOutput
			//   HTMLTitle
			//   CustomTool
			//   URL
			//   Filesize
			//   CustomToolNamespace
			//   Author
			//   FullPath
			//   IsDependentFile
			//   IsDesignTimeBuildInput
			//   DateCreated
			//   LocalPath
			//   ModifiedBy
			  
		}

        public EnvDTE.ProjectItem ProjectItem
        {
            get
            {
                return this.s;
            }
        }

		public override DateTime GetLastAccessTime { get { return File.GetLastAccessTime(this.Filename); } }

		public override DateTime GetCreationTime { get { return File.GetCreationTime (this.Filename); } }

		public override DateTime GetLastWriteTime { get { return File.GetLastWriteTime (this.Filename); } }

		public override KindItem KindItem { get { return KindItem.File; } }


		public string WebReferenceInterface
		{
			get { return FindProperty<string>("WebReferenceInterface").Value; }
			set { FindProperty<string>("WebReferenceInterface").Value = value; }
		}
			

		public string WebReference
		{
			get { return FindProperty<string>("WebReference").Value; }
			set { FindProperty<string>("WebReference").Value = value; }
		}
			

		public string URL
		{
			get { return FindProperty<string>("URL").Value; }
			set { FindProperty<string>("URL").Value = value; }
		}
			

		public string UrlBehavior
		{
			get { return FindProperty<string>("UrlBehavior").Value; }
			set { FindProperty<string>("UrlBehavior").Value = value; }
		}
			

		public string Filename
		{
			get { return this.path; }
		}

		public string LocalPath
		{
			get { return FindProperty<string>("LocalPath").Value; }
			set { FindProperty<string>("LocalPath").Value = value; }
		}
			

		public string DefaultNamespace
		{
			get { return FindProperty<string>("DefaultNamespace").Value; }
			set { FindProperty<string>("DefaultNamespace").Value = value; }
		}
			

		protected override void BuildProperties()
		{

			_properties = new Dictionary<string, NodeItemProperty>();

            string aa = s.Name;
			try
			{
				foreach (EnvDTE.Property item in s.Properties)
					_properties.Add(item.Name, new NodeProperty<object>(s, item.Name));
			}
			catch(Exception)
			{

			}
		}

		public override IEnumerable<T> GetItem<T>(Func<T, bool> filter)
		{

			if (s.ProjectItems != null)
				foreach (ProjectItem item in s.ProjectItems)
				{

					NodeItem i = Helper.CreateNodeItem(item);

					var f = i as T;
					if (f != null)
						if (filter == null || filter(f))
							yield return f;

					foreach (NodeSolutionItem i2 in i.GetItem<T>(filter))
						yield return i2 as T;

				}

		}

		///<summary>
		/// return the list of classes contains in the file.
		///</summary>
		public IEnumerable<BaseInfo> GetClassItems()
		{

			if (classes == null)
            {

                classes = new List<BaseInfo>();
			
                try
                {
                    if (s.FileCodeModel != null)
                    {

                        foreach (CodeClass2 code in s.FileCodeModel.CodeElements.OfType<CodeClass2>())
                            if (ObjectFactory.Instance.AcceptClass(code))
                                classes.Add(ObjectFactory.Instance.CreateClass(this, code));

                        foreach (CodeEnum code in s.FileCodeModel.CodeElements.OfType<CodeEnum>())
                            if (ObjectFactory.Instance.AcceptEnum(code))
                                classes.Add(ObjectFactory.Instance.CreateEnum(this, code));

                        foreach (CodeInterface2 code in s.FileCodeModel.CodeElements.OfType<CodeInterface2>())
                            if (ObjectFactory.Instance.AcceptInterface(code))
                                classes.Add(ObjectFactory.Instance.CreateInterface(this, code));
				
                        foreach (EnvDTE.CodeNamespace ns in s.FileCodeModel.CodeElements.OfType<EnvDTE.CodeNamespace>())
                        {

                            foreach (CodeClass2 code in ns.Members.OfType<CodeClass2>())
                                if (ObjectFactory.Instance.AcceptClass(code))
                                    classes.Add(ObjectFactory.Instance.CreateClass(this, code));

                            foreach (CodeEnum code in ns.Members.OfType<CodeEnum>())
                                if (ObjectFactory.Instance.AcceptEnum(code))
                                    classes.Add(ObjectFactory.Instance.CreateEnum(this, code));

                            foreach (CodeInterface2 code in ns.Members.OfType<CodeInterface2>())
                                if (ObjectFactory.Instance.AcceptInterface(code))
                                    classes.Add(ObjectFactory.Instance.CreateInterface(this, code));

                        }
                    }
                }
                catch
                {

                }

            }

			return classes;
		
		}

		
		public IEnumerable<EnvDTE.CodeNamespace> GetNamespaceItems()
		{

			List<EnvDTE.CodeNamespace> list = new List<EnvDTE.CodeNamespace>();
			
			foreach (EnvDTE.CodeNamespace codeNamespace in s.FileCodeModel.CodeElements.OfType<EnvDTE.CodeNamespace>())
				list.Add(codeNamespace);

			return list;
		
		}

		public override string Kind { get { return s.Kind; } }

		public override string Name        
		{       
			get { return s.Name; }
			set { s.Name = value; }
		}

		public string Name2 { get { return s.FileNames[0]; } }

		
	}

    [System.Diagnostics.DebuggerDisplay("{FullName}")]
	public class NodeFolderSolution : NodeSolutionItem
	{

		public NodeFolderSolution(EnvDTE.Project project) : base(project)
		{
			
		}

		public virtual string FullName
		{
			get
			{
				return project.FullName;
			}
		}

		public override KindItem KindItem { get { return KindItem.Folder; } }

	}


	// -----------------------------------------------------------------------------------
	// -----------------------------------------------------------------------------------
	// -------------                  Code parser                             ------------
	// -----------------------------------------------------------------------------------
	// -----------------------------------------------------------------------------------

	public class ObjectFactory
	{

		private static ObjectFactory _instance; 
		public static ObjectFactory Instance
		{

			get
			{
				if (_instance == null)
					_instance = new ObjectFactory();
				return _instance;
			}
			set
			{
				_instance = value;
			}

		}

		public virtual bool AcceptInterface(CodeInterface2 c)
		{	
			return true;
		}


		public virtual bool AcceptClass(CodeClass2 c)
		{	
			return true;
		}

		public virtual bool AcceptEnum(CodeEnum e)
		{	
			return true;
		}

        public NodeProject DefaultProject { get; set; }

        public virtual TypeInfo CreateType(CodeTypeRef type)
        {
            return new TypeInfo(type);
        }

        public virtual EnumInfo CreateEnum(NodeItem parent, CodeEnum item)
		{
			return new EnumInfo(parent, item);
		}

        public virtual CodeFieldInfo CreateEnumValue(EnumInfo parent, CodeElement item, TypeInfo type)
        {
            return new CodeFieldInfo(parent, item, type);
        }

		public virtual ClassInfo CreateClass(NodeItem parent, CodeClass2 item)
		{
			return new ClassInfo(parent, item);
		}

		public virtual InterfaceInfo CreateInterface(NodeItem parent, CodeInterface2 item)
		{
			return new InterfaceInfo(parent, item);
		}

		public virtual AttributeInfo CreateAttribute(CodeAttribute2 item)
		{
			return new AttributeInfo(item);
		}

		public virtual CodeFunctionInfo CreateMethod(BaseInfo parent, CodeFunction2 item)
		{
			return new CodeFunctionInfo(parent, item);
		}

		public virtual AttributeArgumentInfo CreateAttributeArgument(EnvDTE80.CodeAttributeArgument item)
		{
			return new AttributeArgumentInfo(item);
		}

		public virtual MethodParamInfo CreatParameter(CodeFunctionInfo parent, CodeParameter2 item, string parameterComment)
		{
			return new MethodParamInfo(parent, item, parameterComment);
		}

		public virtual CodePropertyInfo CreateProperty(BaseInfo parent, CodeProperty2 item)
		{
			return new CodePropertyInfo(parent, item);
		}

		public virtual CodeEventInfo CreateEvent(BaseInfo parent, EnvDTE80.CodeEvent item)
		{
			return new CodeEventInfo(parent, item);
		}

		public static IEnumerable<AttributeInfo> GetAttributes(IEnumerable<AttributeInfo> attributes, string attributeType)
		{

			var ar = attributeType.Split(','); 

			foreach(AttributeInfo attr in attributes)
				if (ar.Contains(attr.FullName, StringComparer.OrdinalIgnoreCase))
					yield return attr;

			yield break;

		}

		public static List<AttributeInfo> GetAttributes(CodeClass2 type)
		{
			

			var l = new List<AttributeInfo>();

			while(type != null) 
			{
				var attribute = GetAttributes(type.Attributes);
				l.AddRange(attribute);
				if (type.Bases.Count == 0)
					return null;
				type = (CodeClass2)type.Bases.Item(1);
			}

			return l;

		}

		public static List<AttributeInfo> GetAttributes(CodeElements attributes)
		{
			List<AttributeInfo> _result = new List<AttributeInfo>();
			for (int i = 1; i <= attributes.Count; i++)
			{
				try
				{
					var attrib = (CodeAttribute2)attributes.Item(i);
					_result.Add(ObjectFactory.Instance.CreateAttribute(attrib));
				}
				catch
				{
					continue;
				}
			}
			return _result;
		}

		public static CMAccess Convert(EnvDTE.vsCMAccess item)
		{

			switch  (item)
			{

				case EnvDTE.vsCMAccess.vsCMAccessAssemblyOrFamily:
					return CMAccess.AssemblyOrFamily;
				case EnvDTE.vsCMAccess.vsCMAccessDefault:
					return CMAccess.Default;
				case EnvDTE.vsCMAccess.vsCMAccessPrivate:
					return CMAccess.Private;
				case EnvDTE.vsCMAccess.vsCMAccessProject:
					return CMAccess.Project;
				case EnvDTE.vsCMAccess.vsCMAccessProjectOrProtected:
					return CMAccess.ProjectOrProtected;
				case EnvDTE.vsCMAccess.vsCMAccessProtected:
					return CMAccess.Protected;
				case EnvDTE.vsCMAccess.vsCMAccessPublic:
					return CMAccess.Public;
				case EnvDTE.vsCMAccess.vsCMAccessWithEvents:
					return CMAccess.WithEvents;

			}

			return CMAccess.Default;

		}
	}


    [System.Diagnostics.DebuggerDisplay("{Namespace}.{Name}")]
    public class InterfaceInfo : BaseInfo
	{
	
		public InterfaceInfo(NodeItem parent, CodeInterface2 item)
			: base(null, item as CodeElement2)
		{

			this.Parent = parent;
			this.item = item;
            this.IsInterface = true;
			this.Access = ObjectFactory.Convert(this.item.Access);
			this.IsAbstract = true;
			this.IsShared = false;
			this.IsGeneric = this.item.IsGeneric;
			this.Namespace = item.Namespace.FullName;

			//this.item.Children
			//this.item.DerivedTypes
			//this.item.DocComment
			//this.item.ImplementedInterfaces
			//this.item.InfoLocation
			//this.item.InheritanceKind
			//this.item.Kind = vsCMElement.
			//this.item.Parent
			//this.item.PartialClasses
			//this.item.Parts

		}

		protected readonly CodeInterface2 item;
		private List<CodeFunctionInfo> _methods;
		private List<CodePropertyInfo> _properties;
		private List<CodeEventInfo> _events;
		private List<AttributeInfo> _attributes;
		private ClassInfo _base;

		public NodeItem Parent { get; private set; }

		public CMAccess Access { get; private set; }

		public string Namespace { get; private set; }

		public bool IsAbstract { get; private set; }

		public bool IsGeneric { get; private set; }
		
		public bool IsShared { get; private set; }

		public bool IsDerivedFrom(string fullName)
		{
			return this.item.IsDerivedFrom[fullName];
		}

		public ClassInfo GetBase()
		{

			if (_base == null && item.Bases.Count > 0)
			{
				CodeClass2 i = item.Bases.Item(1) as CodeClass2;
				_base = ObjectFactory.Instance.CreateClass(this.Parent, i);
			}

			return _base;

		}

		public IEnumerable<CodeFunctionInfo> GetMethods()
		{

			if (_methods == null)
			{

				_methods = new  List<CodeFunctionInfo>();
				CodeInterface2 i = item;

				while(i != null) 
				{

					var _members = i.Members.OfType<CodeFunction2>()
						.Where(f => AcceptMethod(f))
						.Select(c => ObjectFactory.Instance.CreateMethod(this, c))
						.Where(d => d != null)
						.ToList();

					_methods.AddRange(_members);

					if (i.Bases.Count == 0)
						break;

					i = i.Bases.Item(1) as CodeInterface2;

					if (i == null || !AcceptAncestor(i.Namespace.FullName, i.Name))
						break;

				}

				InitializeMethods(_methods);

			}

			return _methods;

		}


		public IEnumerable<CodePropertyInfo> GetProperties()
		{

			if (_properties == null)
			{

				_properties = new  List<CodePropertyInfo>();
				CodeInterface2 i = item;

				while(i != null) 
				{
				
					var _members = i.Members.OfType<CodeProperty2>()
						.Where(f => AcceptProperty(f))
						.Select(c => ObjectFactory.Instance.CreateProperty(this, c))
						.Where(d => d != null)
						.ToList();

					_properties.AddRange(_members);

					if (i.Bases.Count == 0)
						break;

					i = i.Bases.Item(1) as CodeInterface2;

					if (i == null || !AcceptAncestor(i.Namespace.FullName, i.Name))
						break;

				}

				InitializeProperties(_properties);

			}

			return _properties;

		}

		public IEnumerable<CodeEventInfo> GetEvents()
		{

			if (_events == null)
			{

				_events = new  List<CodeEventInfo>();

				CodeInterface2 i = item;

				while(i != null) 
				{
								 
					var _members = item.Members.OfType<EnvDTE80.CodeEvent>()
							.Where(f => AcceptEvent(f))
							.Select(c => ObjectFactory.Instance.CreateEvent(this, c))
							.Where(d => d != null)
							.ToList();

					_events.AddRange(_members);

					if (i.Bases.Count == 0)
						break;

					i = i.Bases.Item(1) as CodeInterface2;

					if (i == null || !AcceptAncestor(i.Namespace.FullName, i.Name))
						break;

				}

				InitializeEvents(_events);

			}

			return _events;

		}

		public IEnumerable<AttributeInfo> Attributes 
		{
			get
			{
				if (_attributes == null)
				{
					try
					{
						_attributes = ObjectFactory.GetAttributes(item.Attributes);
					}
					catch(Exception)
					{
						_attributes = new List<AttributeInfo>();
					}

					InitializeAttributes(_attributes);

				}
				return _attributes;
			}
		}

		protected virtual bool AcceptAncestor(string _namespace, string name)
		{
			return true;
		}

		protected IEnumerable<AttributeInfo> GetAttributes(string attributeType)
		{
			return ObjectFactory.GetAttributes(Attributes, attributeType).ToList();
		}

		protected virtual bool AcceptEvent(EnvDTE80.CodeEvent e)
		{
			return true;
		}

		protected bool IsPublic(EnvDTE.vsCMAccess a)
		{
			return a == EnvDTE.vsCMAccess.vsCMAccessPublic;
		}

		protected bool IsPrivate(EnvDTE.vsCMAccess a)
		{
			return a == EnvDTE.vsCMAccess.vsCMAccessPrivate;
		}

		protected bool IsProtected(EnvDTE.vsCMAccess a)
		{
			return ( a & EnvDTE.vsCMAccess.vsCMAccessProtected) == EnvDTE.vsCMAccess.vsCMAccessProtected;
		}

		protected bool IsFamily(EnvDTE.vsCMAccess a)
		{
			return (a & EnvDTE.vsCMAccess.vsCMAccessProject) == EnvDTE.vsCMAccess.vsCMAccessProject;
		}

		protected bool IsFamilyOrProtected(EnvDTE.vsCMAccess a)
		{
			return (a & EnvDTE.vsCMAccess.vsCMAccessProjectOrProtected) == EnvDTE.vsCMAccess.vsCMAccessProjectOrProtected;
		}

		protected virtual void InitializeEvents(List<CodeEventInfo> events)
		{

		}
		
		protected virtual bool AcceptMethod(CodeFunction2 method)
		{
			return method.FunctionKind == vsCMFunction.vsCMFunctionFunction;
		}

		protected virtual void InitializeMethods(List<CodeFunctionInfo> methods)
		{

		}

		protected virtual bool AcceptProperty(CodeProperty2 property)
		{
			return true;
		}

		protected virtual void InitializeProperties(List<CodePropertyInfo> properties)
		{

		}

		protected virtual void InitializeAttributes(List<AttributeInfo> attributes)
		{

		}


	}

    [System.Diagnostics.DebuggerDisplay("{FullName}")]
    public class EnumInfo : BaseInfo
    {

        private CodeEnum _enum;
        private List<CodeFieldInfo> _fields;
        private TypeInfo type = null;

        public EnumInfo(NodeItem parent, CodeEnum item)
            : base(null, item as CodeElement2)
        {


            this._enum = item as CodeEnum;
            this.IsEnum = true;

            GetFields();

        } 

        public IEnumerable<CodeFieldInfo> GetFields()
        {

            if (_fields == null)
            {

                _fields = new  List<CodeFieldInfo>();

                var _members = _enum.Members.OfType<CodeElement2>()
                    .Select(c => ObjectFactory.Instance.CreateEnumValue(this, c, type))
                    .Where(d => d != null)
                    .ToList();

                _fields.AddRange(_members);


                InitializeFields(_fields);

            }

            return _fields;
            
        }

        public virtual void InitializeFields(List<CodeFieldInfo> fields)
        {

        }

    }

    [System.Diagnostics.DebuggerDisplay("{FullName}")]
	public class ClassInfo : BaseInfo
	{

	    protected ClassInfo(BaseInfo parent, CodeElement2 item)
            : base(parent, item)
		{
            

		}
	
		public ClassInfo(NodeItem parent, CodeClass2 item)
			: base(null, item as CodeElement2)
		{

			this.Parent = parent;
			this.item = item;
            this.IsClass = true;

			this.Access = ObjectFactory.Convert(this.item.Access);

			this.IsAbstract = this.item.IsAbstract;
		   
			this.IsShared = this.item.IsShared;
			this.IsGeneric = this.item.IsGeneric;
			this.Namespace = item.Namespace.FullName;

            
			//this.item.Children
			//this.item.DerivedTypes
			//this.item.DocComment
			//this.item.ImplementedInterfaces
			//this.item.InfoLocation
			//this.item.InheritanceKind
			//this.item.Kind = vsCMElement.
			//this.item.Parent
			//this.item.PartialClasses
			//this.item.Parts

		}


		protected readonly CodeClass2 item;
		private List<CodeFunctionInfo> _methods;
		private List<CodePropertyInfo> _properties;
		private List<CodeEventInfo> _events;
		private List<AttributeInfo> _attributes;
		private ClassInfo _base;

		public NodeItem Parent { get; private set; }

		public CMAccess Access { get; private set; }

		public string Namespace { get; private set; }

		public bool IsAbstract { get; private set; }

		public bool IsGeneric { get; private set; }
		
		public bool IsShared { get; private set; }

		public bool IsDerivedFrom(string fullName)
		{
			return this.item.IsDerivedFrom[fullName];
		}

		public ClassInfo GetBase()
		{

			if (_base == null && item.Bases.Count > 0)
			{
				CodeClass2 i = item.Bases.Item(1) as CodeClass2;
				_base = ObjectFactory.Instance.CreateClass(this.Parent, i);
			}

			return _base;

		}

		public IEnumerable<CodeFunctionInfo> GetMethods()
		{

			if (_methods == null)
			{

				_methods = new  List<CodeFunctionInfo>();
				CodeClass2 i = item;

				while(i != null) 
				{

					var _members = i.Members.OfType<CodeFunction2>()
						.Where(f => AcceptMethod(f))
						.Select(c => ObjectFactory.Instance.CreateMethod(this, c))
						.Where(d => d != null)
						.ToList();

					_methods.AddRange(_members);

					if (i.Bases.Count == 0)
						break;

					i = i.Bases.Item(1) as CodeClass2;

					if (i == null || !AcceptAncestor(i.Namespace.FullName, i.Name))
						break;

				}

				InitializeMethods(_methods);

			}

			return _methods;

		}


		public IEnumerable<CodePropertyInfo> GetProperties()
		{

			if (_properties == null)
			{

				_properties = new  List<CodePropertyInfo>();
				CodeClass2 i = item;

				while(i != null) 
				{
				
					var _members = i.Members.OfType<CodeProperty2>()
						.Where(f => AcceptProperty(f))
						.Select(c => ObjectFactory.Instance.CreateProperty(this, c))
						.Where(d => d != null)
						.ToList();

					_properties.AddRange(_members);

					if (i.Bases.Count == 0)
						break;

					i = i.Bases.Item(1) as CodeClass2;

					if (i == null || !AcceptAncestor(i.Namespace.FullName, i.Name))
						break;

				}

				InitializeProperties(_properties);

			}

			return _properties;

		}

		public IEnumerable<CodeEventInfo> GetEvents()
		{

			if (_events == null)
			{

				_events = new  List<CodeEventInfo>();

				CodeClass2 i = item;

				while(i != null) 
				{
								 
					var _members = item.Members.OfType<EnvDTE80.CodeEvent>()
							.Where(f => AcceptEvent(f))
							.Select(c => ObjectFactory.Instance.CreateEvent(this, c))
							.Where(d => d != null)
							.ToList();

					_events.AddRange(_members);

					if (i.Bases.Count == 0)
						break;

					i = i.Bases.Item(1) as CodeClass2;

					if (i == null || !AcceptAncestor(i.Namespace.FullName, i.Name))
						break;

				}

				InitializeEvents(_events);

			}

			return _events;

		}

		public IEnumerable<AttributeInfo> Attributes 
		{
			get
			{
				if (_attributes == null)
				{
					try
					{
						_attributes = ObjectFactory.GetAttributes(item.Attributes);
					}
					catch(Exception)
					{
						_attributes = new List<AttributeInfo>();
					}

					InitializeAttributes(_attributes);

				}
				return _attributes;
			}
		}

		protected virtual bool AcceptAncestor(string _namespace, string name)
		{
			return true;
		}

		protected IEnumerable<AttributeInfo> GetAttributes(string attributeType)
		{
			return ObjectFactory.GetAttributes(Attributes, attributeType).ToList();
		}

		protected virtual bool AcceptEvent(EnvDTE80.CodeEvent e)
		{
			return true;
		}

		protected bool IsPublic(EnvDTE.vsCMAccess a)
		{
			return a == EnvDTE.vsCMAccess.vsCMAccessPublic;
		}

		protected bool IsPrivate(EnvDTE.vsCMAccess a)
		{
			return a == EnvDTE.vsCMAccess.vsCMAccessPrivate;
		}

		protected bool IsProtected(EnvDTE.vsCMAccess a)
		{
			return ( a & EnvDTE.vsCMAccess.vsCMAccessProtected) == EnvDTE.vsCMAccess.vsCMAccessProtected;
		}

		protected bool IsFamily(EnvDTE.vsCMAccess a)
		{
			return (a & EnvDTE.vsCMAccess.vsCMAccessProject) == EnvDTE.vsCMAccess.vsCMAccessProject;
		}

		protected bool IsFamilyOrProtected(EnvDTE.vsCMAccess a)
		{
			return (a & EnvDTE.vsCMAccess.vsCMAccessProjectOrProtected) == EnvDTE.vsCMAccess.vsCMAccessProjectOrProtected;
		}

		protected virtual void InitializeEvents(List<CodeEventInfo> events)
		{

		}
		
		protected virtual bool AcceptMethod(CodeFunction2 method)
		{
			return method.FunctionKind == vsCMFunction.vsCMFunctionFunction;
		}

		protected virtual void InitializeMethods(List<CodeFunctionInfo> methods)
		{

		}

		protected virtual bool AcceptProperty(CodeProperty2 property)
		{
			return true;
		}

		protected virtual void InitializeProperties(List<CodePropertyInfo> properties)
		{

		}

		protected virtual void InitializeAttributes(List<AttributeInfo> attributes)
		{

		}


	}

	public enum CMAccess
	{
		AssemblyOrFamily,
		Default,
		Private,
		Project,
		ProjectOrProtected,
		Protected,
		Public,
		WithEvents,
	}

    [System.Diagnostics.DebuggerDisplay("{FullName}")]
	public class AttributeInfo
	{

		private CodeAttribute2 _attr;
		private List<AttributeArgumentInfo> _arguments;
		public AttributeInfo(CodeAttribute2 attribute)
		{
			this._attr = attribute;
		}

		public string FullName { get { return _attr.FullName; } }

		public IEnumerable<AttributeArgumentInfo> Arguments
		{
			get
			{
				if (_arguments == null)
				{
					_arguments = new List<AttributeArgumentInfo>();
					foreach(EnvDTE80.CodeAttributeArgument arg in _attr.Arguments.OfType<EnvDTE80.CodeAttributeArgument>())
						_arguments.Add(ObjectFactory.Instance.CreateAttributeArgument(arg));
				}

				return _arguments;

			}
		}

        public string GetValue(string name)
        {

            AttributeArgumentInfo item = Arguments.Where(c => c.Name == name).FirstOrDefault();

            if (item != null)
                return item.Value;

            return string.Empty;

        }

		//public override bool Equals(object obj)
		//{
//
			//if (_parameters == null)
			//{
				//var t = this.Parameters;
			//}
			//return obj != null && _attr.Name == ((CodeFunctionInfo)obj)._signature;
		//}
//
		//public override int GetHashCode()
		//{
//
			 //if (_parameters == null)
			 //{
				//var t = this.Parameters;
			 //}
//
			//return _signature.GetHashCode();
//
		//}

	}

    [System.Diagnostics.DebuggerDisplay("{Name}")]
	public class AttributeArgumentInfo
	{

		private EnvDTE80.CodeAttributeArgument item;
		public AttributeArgumentInfo(EnvDTE80.CodeAttributeArgument item)
		{

			this.item = item;
			this.Name= this.item.Name;
			this.Value= this.item.Value;

		}

		public string Name { get; private set; } 
		public string Value { get; private set; } 

	}

    [System.Diagnostics.DebuggerDisplay("{FullName}")]
	public class BaseInfo
	{

		public BaseInfo(BaseInfo parent, CodeElement2 item)
		{
			this.Name = item.Name;
			this.FullName = item.FullName;
			this.IsCodeType = item.IsCodeType;
			this.Root = parent;
            this.Source = item; 
		}
		
        protected CodeElement2 Source { get; private set;}
		public string Name { get ; private set; }
		public string Summary { get; protected set; }
		public string FullName { get; private set; }
		public bool IsCodeType { get; private set; }
		public BaseInfo Root { get; private set; }

        public bool IsEnum { get; protected set; }
        public bool IsInterface { get; protected set; }  
        public bool IsClass { get; protected set; }  

	}

	public abstract class CodeMemberInfo : BaseInfo
	{

		public CodeMemberInfo(BaseInfo parent, CodeElement2 item)
			: base (parent, item)
		{
			Parent = parent;
		}
		
		public abstract TypeInfo Type { get; }

		public CMAccess Access { get; protected set; }

		public BaseInfo Parent { get; private set; }

		protected virtual void InitializeAttributes(List<AttributeInfo> attributes)
		{

		}

	}

    [System.Diagnostics.DebuggerDisplay("event {FullName}")]
	public class CodeEventInfo : CodeMemberInfo
	{

		private EnvDTE80.CodeEvent _item;
		private TypeInfo _returnType;
		private IEnumerable<AttributeInfo> _attributes;

		public CodeEventInfo(BaseInfo parent, EnvDTE80.CodeEvent item)
			: base(parent, item as CodeElement2)
		{
			this._item = item;
			this.Access = ObjectFactory.Convert(this._item.Access);
		}

		public override TypeInfo Type
		{
			get
			{
				if (_returnType == null)
					_returnType = TypeInfo.Create(_item.Type);
				return _returnType;
			}
		}

		public IEnumerable<AttributeInfo> Attributes 
		{
			get
			{
				if (_attributes == null)
				{
					try
					{
						_attributes = ObjectFactory.GetAttributes(_item.Attributes);
					}
					catch(Exception)
					{
						_attributes = new List<AttributeInfo>();
					}

					InitializeAttributes(_attributes as List<AttributeInfo>);

				}
				return _attributes;
			}
		}

		protected IEnumerable<AttributeInfo> GetAttributes(string attributeType)
		{
			return ObjectFactory.GetAttributes(Attributes, attributeType).ToList();
		}

		protected AttributeInfo GetAttribute(string attributeType)
		{
			return ObjectFactory.GetAttributes(Attributes, attributeType).FirstOrDefault();
		}

		protected void ForAttributes(string attributeType, Action<AttributeInfo> act)
		{
			foreach(AttributeInfo attr in ObjectFactory.GetAttributes(Attributes, attributeType))
				act(attr);
		}

		protected string GetArgumentFromAttribute(string attributeType, string argumentName)
		{
			AttributeInfo attr = ObjectFactory.GetAttributes(Attributes, attributeType).FirstOrDefault();
			if (attr != null)
			{
				AttributeArgumentInfo arg = attr.Arguments.FirstOrDefault(a => a.Name == argumentName);
				if (arg != null)
					return arg.Value;
			}
			return string.Empty;
		}

		protected string GetArgumentFromAttribute(string attributeType, int indexArgument)
		{
			AttributeInfo attr = ObjectFactory.GetAttributes(Attributes, attributeType).FirstOrDefault();
			if (attr != null)
			{
				AttributeArgumentInfo arg = (attr.Arguments as List<AttributeArgumentInfo>)[indexArgument];
				if (arg != null)
					return arg.Value;
			}
			return string.Empty;
		}

	}

    [System.Diagnostics.DebuggerDisplay("field {FullName}")]
    public class CodeFieldInfo : CodeMemberInfo
    {

		private CodeElement _item;
        private TypeInfo _type;

        public CodeFieldInfo(BaseInfo parent, CodeElement item, TypeInfo type)
            : base(parent, item as CodeElement2)
        {
            this._item = item;
            this.Access = CMAccess.Public; // ObjectFactory.Convert(this._item.Access);
            this._type = type;
        }

        public override TypeInfo Type 
        { 
            get
            {
                return _type;
            }
        }
    

    }

    [System.Diagnostics.DebuggerDisplay("property {FullName}")]
	public class CodePropertyInfo : CodeMemberInfo
	{

		private CodeProperty2 _item;
		private TypeInfo _returnType;
		private IEnumerable<AttributeInfo> _attributes;

		public CodePropertyInfo(BaseInfo parent, CodeProperty2 item)
			: base(parent, item as CodeElement2)
		{
			this._item = item;
			this.Access = ObjectFactory.Convert(this._item.Access);
		}

		public override TypeInfo Type
		{
			get
			{
				if (_returnType == null)
					_returnType = TypeInfo.Create(_item.Type);
				return _returnType;
			}
		}

		public IEnumerable<AttributeInfo> Attributes 
		{
			get
			{
				if (_attributes == null)
				{
					try
					{
						_attributes = ObjectFactory.GetAttributes(_item.Attributes);
					}
					catch(Exception)
					{
						_attributes = new List<AttributeInfo>();
					}

					InitializeAttributes(_attributes as List<AttributeInfo>);

				}
				return _attributes;
			}
		}


		protected IEnumerable<AttributeInfo> GetAttributes(string attributeType)
		{
			return ObjectFactory.GetAttributes(Attributes, attributeType).ToList();
		}

		protected AttributeInfo GetAttribute(string attributeType)
		{
			return ObjectFactory.GetAttributes(Attributes, attributeType).FirstOrDefault();
		}

		protected void ForAttributes(string attributeType, Action<AttributeInfo> act)
		{
			foreach(AttributeInfo attr in ObjectFactory.GetAttributes(Attributes, attributeType))
				act(attr);
		}

		protected string GetArgumentFromAttribute(string attributeType, string argumentName)
		{
			AttributeInfo attr = ObjectFactory.GetAttributes(Attributes, attributeType).FirstOrDefault();
			if (attr != null)
			{
				AttributeArgumentInfo arg = attr.Arguments.FirstOrDefault(a => a.Name == argumentName);
				if (arg != null)
					return arg.Value;
			}
			return string.Empty;
		}

		protected string GetArgumentFromAttribute(string attributeType, int indexArgument)
		{
			AttributeInfo attr = ObjectFactory.GetAttributes(Attributes, attributeType).FirstOrDefault();
			if (attr != null)
			{
				AttributeArgumentInfo arg = (attr.Arguments as List<AttributeArgumentInfo>)[indexArgument];
				if (arg != null)
					return arg.Value;
			}
			return string.Empty;
		}

	}


    [System.Diagnostics.DebuggerDisplay("Method {FullName}")]
	public class CodeFunctionInfo : CodeMemberInfo
	{

		protected CodeFunction2 _item;
		private string _signature;
		private Dictionary<string, string> parameters = new Dictionary<string, string>();
		private TypeInfo _returnType;
		private IEnumerable<MethodParamInfo> _parameters;
		private IEnumerable<AttributeInfo> _attributes;
			
		public CodeFunctionInfo(BaseInfo parent, CodeFunction2 method)
			: base(parent, method as CodeElement2)
		{

			// Can be null when an custom ActionResult has no ctor
			if (method == null)
				return;

			_item = method;
			Summary = string.Empty;
			_signature = method.Name;
			
			try
			{
				BuildComment(_item.DocComment);
			}
			catch(Exception)
			{

			}

			this.Access = ObjectFactory.Convert(this._item.Access);

			Parameters.ToList();

		}

		private void BuildComment(string docs)
		{
			try     
			{

				if (!string.IsNullOrEmpty(docs))
				{

					System.Xml.Linq.XElement _element;

					var comment = System.Xml.Linq.XElement.Parse(_item.DocComment);

					if ((_element = comment.Element("summary")) != null)
						Summary = _element.Value;

					if ((_element = comment.Element("param")) != null)
					{
						var p = _element.Attribute("name");
						if (p != null)
							parameters.Add(p.Value, _element.Value);
					}
				}
			}
			catch
			{
			}
		}

		public override TypeInfo Type
		{
			get
			{
				if (_returnType == null)
					_returnType = TypeInfo.Create(_item.Type);
				return _returnType;
			}
		}

		public IEnumerable<AttributeInfo> Attributes 
		{
			get
			{
				if (_attributes == null)
				{
					try
					{
						_attributes = ObjectFactory.GetAttributes(_item.Attributes);
					}
					catch(Exception)
					{
						_attributes = new List<AttributeInfo>();
					}

					InitializeAttributes(_attributes as List<AttributeInfo>);

				}
				return _attributes;
			}
		}


		protected IEnumerable<AttributeInfo> GetAttributes(string attributeType)
		{
			return ObjectFactory.GetAttributes(Attributes, attributeType).ToList();
		}

		protected AttributeInfo GetAttribute(string attributeType)
		{
			return ObjectFactory.GetAttributes(Attributes, attributeType).FirstOrDefault();
		}

		protected void ForAttributes(string attributeType, Action<AttributeInfo> act)
		{
			foreach(AttributeInfo attr in ObjectFactory.GetAttributes(Attributes, attributeType))
				act(attr);
		}

		protected string GetArgumentFromAttribute(string attributeType, string argumentName)
		{
			AttributeInfo attr = ObjectFactory.GetAttributes(Attributes, attributeType).FirstOrDefault();
			if (attr != null)
			{
				AttributeArgumentInfo arg = attr.Arguments.FirstOrDefault(a => a.Name == argumentName);
				if (arg != null)
					return arg.Value;
			}
			return string.Empty;
		}

		protected string GetArgumentFromAttribute(string attributeType, int indexArgument)
		{
			AttributeInfo attr = ObjectFactory.GetAttributes(Attributes, attributeType).FirstOrDefault();
			if (attr != null)
			{
				AttributeArgumentInfo arg = (attr.Arguments as List<AttributeArgumentInfo>)[indexArgument];
				if (arg != null)
					return arg.Value;
			}
			return string.Empty;
		}

		public IEnumerable<MethodParamInfo> Parameters 
		{ 
			get 
			{

				if (_parameters == null)
				{
					var _Parameters = new List<MethodParamInfo>();
					// Process all the parameters
					foreach (CodeParameter2 p in _item.Parameters.OfType<CodeParameter2>())
					{
			
						string parameterComment = string.Empty;
						parameters.TryGetValue(p.Name, out  parameterComment);

						_Parameters.Add(ObjectFactory.Instance.CreatParameter(this, p, parameterComment));
						_signature += "," + p.Type.AsString;
					}

					_parameters = _Parameters;

				}

				return _parameters;

			} 
		}

		//public void WriteFormalParameters(bool first)
		//{
			//WriteFormalParameters(first, false);
		//}

		// Write out all the parameters as part of a method declaration
		//public void WriteFormalParameters(bool first, bool includeDefaults)
		//{
			//foreach (var p in Parameters)
			//{
				//if (first)
					//first = false;
				//else
					//TT.Write(", ");
//
				//TT.Write(p.Type + " " + p.Name);
				//if(includeDefaults && !string.IsNullOrEmpty(p.DefaultValue))
					//TT.Write(" = " + p.DefaultValue);
			//}
		//}
//
		//// Pass non-empty param values to make sure the ActionResult ctors don't complain
		//// REVIEW: this is a bit dirty
		//public void WriteNonEmptyParameterValues(bool first)
		//{
			//foreach (var p in Parameters)
			//{
				//if (first)
					//first = false;
				//else
					//TT.Write(", ");
//
				//if(!string.IsNullOrEmpty(p.DefaultValue))
					//TT.Write(p.DefaultValue);
				//else
				//{
					//switch (p.Type)
					//{
						//case "string":
							//TT.Write("\" \"");
							//break;
						//case "byte[]":
							//TT.Write("new byte[0]");
							//break;
						//default:
							//TT.Write("default(" + p.Type + ")");
							//break;
					//}
				//}
			//}
		//}
//
		public override bool Equals(object obj)
		{

			if (_parameters == null)
			{
				var t = this.Parameters;
			}
			return obj != null && _signature == ((CodeFunctionInfo)obj)._signature;
		}

		public override string ToString()
		{

			return _signature;

		}

		public override int GetHashCode()
		{

			 if (_parameters == null)
			 {
				var t = this.Parameters;
			 }

			return _signature.GetHashCode();

		}

	}


    [System.Diagnostics.DebuggerDisplay("parameter {Name}")]
	public class MethodParamInfo
	{

		private IEnumerable<AttributeInfo> _attributes;
		private CodeParameter2 item;
		private CodeFunctionInfo parent;

		public MethodParamInfo(CodeFunctionInfo parent, CodeParameter2 item, string comment)
		{
			this.parent = parent;
			this.item = item;
			this.Comment = comment;
			Name = item.Name;
			Type = TypeInfo.Create(item.Type);
			DefaultValue = item.DefaultValue;
		}

		public string Name { get; private set; }
		public TypeInfo Type { get; private set; }
		public string DefaultValue { get; set; }
		public string Comment { get; private set; }

		public IEnumerable<AttributeInfo> Attributes 
		{
			get
			{
				if (_attributes == null)
				{
					try
					{
						_attributes = ObjectFactory.GetAttributes(item.Attributes);
					}
					catch(Exception)
					{
						_attributes = new List<AttributeInfo>();
					}

					InitializeAttributes(_attributes as List<AttributeInfo>);

				}
				return _attributes;
			}
		}

		protected virtual void InitializeAttributes(List<AttributeInfo> attributes)
		{

		}

		protected IEnumerable<AttributeInfo> GetAttributes(string attributeType)
		{
			return ObjectFactory.GetAttributes(Attributes, attributeType).ToList();
		}

		protected AttributeInfo GetAttribute(string attributeType)
		{
			return ObjectFactory.GetAttributes(Attributes, attributeType).FirstOrDefault();
		}

		protected void ForAttributes(string attributeType, Action<AttributeInfo> act)
		{
			foreach(AttributeInfo attr in ObjectFactory.GetAttributes(Attributes, attributeType))
				act(attr);
		}

		protected string GetArgumentFromAttribute(string attributeType, string argumentName)
		{
			AttributeInfo attr = ObjectFactory.GetAttributes(Attributes, attributeType).FirstOrDefault();
			if (attr != null)
			{
				AttributeArgumentInfo arg = attr.Arguments.FirstOrDefault(a => a.Name == argumentName);
				if (arg != null)
					return arg.Value;
			}
			return string.Empty;
		}

		protected string GetArgumentFromAttribute(string attributeType, int indexArgument)
		{
			AttributeInfo attr = ObjectFactory.GetAttributes(Attributes, attributeType).FirstOrDefault();
			if (attr != null)
			{
				AttributeArgumentInfo arg = (attr.Arguments as List<AttributeArgumentInfo>)[indexArgument];
				if (arg != null)
					return arg.Value;
			}
			return string.Empty;
		}

	}


    [System.Diagnostics.DebuggerDisplay("{ClassName}")]
	public class TypeInfo
	{

		private List<TypeInfo> _list = new List<TypeInfo>();
		private int _rank = 0;
		private CodeTypeRef type;
		private IEnumerable<AttributeInfo> _attributes;
		private BaseInfo _classRef;
        private List<CodePropertyInfo> PropertyInfolst;
        private List<CodeEventInfo> EventInfolst;
        private List<CodeFunctionInfo> MethodInfolst;
        private Project project;

		TypeInfo()
		{

		}

		public TypeInfo(CodeTypeRef type)
        {

            Set(type);
        }

        private void Set(CodeTypeRef type)
        {

            this._list = new List<TypeInfo>();
		    this._rank = 0;
		    this._attributes = null;
		    this._classRef = null;
            this.IsVoid = false;
            this.IsEnumerable = false;
            this.IsClass = false;
            this.MethodInfolst = null;
            this.EventInfolst = null;
            this.PropertyInfolst = null;

            this.type = type;

            switch(type.TypeKind)
            {

                case vsCMTypeRef.vsCMTypeRefArray:
                case vsCMTypeRef.vsCMTypeRefCodeType:
                case vsCMTypeRef.vsCMTypeRefBool:
                case vsCMTypeRef.vsCMTypeRefByte:
                case vsCMTypeRef.vsCMTypeRefDecimal:
                case vsCMTypeRef.vsCMTypeRefDouble:
                case vsCMTypeRef.vsCMTypeRefFloat:
                case vsCMTypeRef.vsCMTypeRefInt:
                case vsCMTypeRef.vsCMTypeRefLong:
                case vsCMTypeRef.vsCMTypeRefShort:
                case vsCMTypeRef.vsCMTypeRefVariant:
                case vsCMTypeRef.vsCMTypeRefChar:
                case vsCMTypeRef.vsCMTypeRefString:
                    Name = type.AsString;
                    break;

                case vsCMTypeRef.vsCMTypeRefVoid:
                    Name = "void";
                    break;

                case vsCMTypeRef.vsCMTypeRefOther:
                case vsCMTypeRef.vsCMTypeRefPointer:
                case vsCMTypeRef.vsCMTypeRefObject:
                    Name = type.AsFullName;
                    break;

            }

            this.KindType = type.TypeKind.ToString().Substring(11);

            if (!(this.IsVoid = (type.TypeKind == vsCMTypeRef.vsCMTypeRefVoid)))
            {

                this.IsClass = (type.TypeKind == vsCMTypeRef.vsCMTypeRefCodeType);
                if (!this.IsClass && type.TypeKind == vsCMTypeRef.vsCMTypeRefArray)
                    this.IsClass = (type.Rank > 0 && type.ElementType.TypeKind == vsCMTypeRef.vsCMTypeRefCodeType);
                else
                    this.IsEnumerable = type.CodeType.get_IsDerivedFrom(typeof(System.Collections.IEnumerable).FullName);

                if (type.TypeKind == vsCMTypeRef.vsCMTypeRefCodeType)
                    if (type.CodeType.InfoLocation != vsCMInfoLocation.vsCMInfoLocationExternal)
                        this.project = this.type.CodeType.ProjectItem.ContainingProject;

            }


			int i = 0;
			Parse(Name, this, ref i);
            DispatchType();
            OnCreated();

        }

		public CodeTypeRef Source
		{
			get
			{
				return type;
			}
            private set
            {
                Set(value);
            }

		}

        public IEnumerable<CodeFunctionInfo> Methods()
        {

            if (MethodInfolst == null)
            {
                if (type != null)
                {

                    if (type.TypeKind == vsCMTypeRef.vsCMTypeRefCodeType)
                        MethodInfolst = type.CodeType.Members.OfType<CodeFunction2>().Select(c => ObjectFactory.Instance.CreateMethod(null, c)).ToList();
                    else if (type.TypeKind == vsCMTypeRef.vsCMTypeRefArray)
                        MethodInfolst = type.ElementType.CodeType.Members.OfType<CodeFunction2>().Select(c => ObjectFactory.Instance.CreateMethod(null, c)).ToList();
                }
            }

            return MethodInfolst;

        }

        public IEnumerable<CodePropertyInfo> Properties()
        {

            if (PropertyInfolst == null)
            {
                if (type != null)
                {
                    if (type.TypeKind == vsCMTypeRef.vsCMTypeRefCodeType)
                        PropertyInfolst = type.CodeType.Members.OfType<CodeProperty2>().Select(c => ObjectFactory.Instance.CreateProperty(null, c)).ToList();
                    else if (type.TypeKind == vsCMTypeRef.vsCMTypeRefArray)
                        PropertyInfolst = type.ElementType.CodeType.Members.OfType<CodeProperty2>().Select(c => ObjectFactory.Instance.CreateProperty(null, c)).ToList();
                }
            }

            return PropertyInfolst;
            
        }

        public IEnumerable<CodeEventInfo> Events()
        {

            if (EventInfolst == null)
            {
                if (type != null)
                {

                    if (type.TypeKind == vsCMTypeRef.vsCMTypeRefCodeType)
                        EventInfolst = type.CodeType.Members.OfType<EnvDTE80.CodeEvent>().Select(c => ObjectFactory.Instance.CreateEvent(null, c)).ToList();
                    else if (type.TypeKind == vsCMTypeRef.vsCMTypeRefArray)
                        EventInfolst = type.ElementType.CodeType.Members.OfType<EnvDTE80.CodeEvent>().Select(c => ObjectFactory.Instance.CreateEvent(null, c)).ToList();
                }
            }

            return EventInfolst;
            
        }

		public BaseInfo ClassRef
		{
			get
			{

				if (_classRef == null)
                    _classRef = ResolveType(this).FirstOrDefault();

				return _classRef;

			}
		}

 
		public static TypeInfo Create(CodeTypeRef type)
		{
			TypeInfo t = ObjectFactory.Instance.CreateType(type);
			return t;
		}

        protected virtual void DispatchType()
        {


            if (this.project == null)
            {
                this.project = ObjectFactory.Instance.DefaultProject.Source;
            }

            if (this.project != null)
            {
                
                foreach(TypeInfo t in this.ElementItems)
                {
                    if (t.Source == null)
                        t.Source = this.project.CodeModel.CreateCodeTypeRef(t.ToString());

                }
            }

        }

        protected virtual void OnCreated()
        {

        }

		public bool IsDerivedFrom(string type)
		{

			try
			{
				return this.type.CodeType.get_IsDerivedFrom(type);
			}
			catch
			{

			}

			return false;

		} 


		private void Parse(string type, TypeInfo t, ref int p)
        {

			
            System.Text.StringBuilder s = new System.Text.StringBuilder();
            for (int i = p; i < type.Length; i++)
            {

                deb:
                    var c = type[i];
                switch (c)
                {

                    case '<':
                        i++;
                        p = i;
                        t.Name = s.ToString();
                        var t2 = new TypeInfo();
                        t.Add(t2);
                        Parse(type, t2, ref p);
                        i = p;

                        if (i < type.Length)
                        {

                            c = type[p];

                            if (c != ',')
                                goto deb;

                            while ((c = type[p]) == ',')
                            {
                                p++;
                                t2 = new TypeInfo();
                                t.Add(t2);
                                Parse(type, t2, ref p);
                                i = p;
                                if (i >= type.Length)
                                    return;
                            }

                            c = type[p];

                            if (c != ',')
                                goto deb;

                        }

                        return;

                    case '>':
                        p = i;
                        p++;
                        t.Name = s.ToString();
                        return;

                    case '[':
                        t.Name = s.ToString();
                        p = i;
                        t.ParseArray(type, ref p);
                        i = p;
                        break;

                    case ',':
                        t.Name = s.ToString();
                        p = i;
                        return;

                    case ' ':
                    case '\t':
                    case '\r':
                    case '\n':
                        break;


                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                    case 'a':
                    case 'b':
                    case 'c':
                    case 'd':
                    case 'e':
                    case 'f':
                    case 'g':
                    case 'h':
                    case 'i':
                    case 'j':
                    case 'k':
                    case 'l':
                    case 'm':
                    case 'n':
                    case 'o':
                    case 'p':
                    case 'q':
                    case 'r':
                    case 's':
                    case 't':
                    case 'u':
                    case 'v':
                    case 'w':
                    case 'x':
                    case 'y':
                    case 'z':
                    case 'A':
                    case 'B':
                    case 'C':
                    case 'D':
                    case 'E':
                    case 'F':
                    case 'G':
                    case 'H':
                    case 'I':
                    case 'J':
                    case 'K':
                    case 'L':
                    case 'M':
                    case 'N':
                    case 'O':
                    case 'P':
                    case 'Q':
                    case 'R':
                    case 'S':
                    case 'T':
                    case 'U':
                    case 'V':
                    case 'W':
                    case 'X':
                    case 'Y':
                    case 'Z':
                    case '.':
                    case '_':
                        s.Append(c);
                        break;

                    case '?':
                        t.IsNullable = true;
                        s.Append(c);
                        break;
                    default:
                        throw new FormatException(type);

                }

            }

        }

		private void ParseArray(string type, ref int p)
		{
			for (int i = p + 1; i < type.Length; i++)
			{
				p = i;
				_rank++;
				var c = type[i];
				if (c == ']')
					break;
			}
		}

		private void Add(TypeInfo t2)
		{
			this._list.Add(t2);
		}

        public bool IsNullable { get; set; }
		public string Name { get; private set; }
        public string KindType { get; set; }
        public bool IsVoid { get; private set; }
        public bool IsClass { get; private set; }
        public bool IsEnumerable { get; private set; }
        public bool IsGeneric { get { return this.ElementItems.Any(); } }
		public string AsFullName 
        { get 
            { 
                return this.type.AsFullName; 
            } 
        }
		
        public int Rank { get { return _rank; } }

		public string ClassName
		{
			get
			{
				var i = Name.LastIndexOf('.');
				if (i > 0)
					return Name.Substring(i + 1);

				return Name;

			}
		}

		public bool ContainsType(string type)
		{
			if (Name == type)
				return true;
			foreach (var item in ElementItems)
			{
				var t = item.ContainsType(type);
				if (t)
					return true;
			}

			return false;

		}

		public IEnumerable<TypeInfo> ElementItems { get { return this._list; } }

	    public IEnumerable<AttributeInfo> Attributes 
		{
			get
			{
				if (_attributes == null)
					_attributes = ObjectFactory.GetAttributes(type.CodeType.Attributes);
				return _attributes;

			}
		}

		protected IEnumerable<AttributeInfo> GetAttributes(string attributeType)
		{
			return ObjectFactory.GetAttributes(Attributes, attributeType).ToList();
		}

		protected AttributeInfo GetAttribute(string attributeType)
		{
			return ObjectFactory.GetAttributes(Attributes, attributeType).FirstOrDefault();
		}

		protected void ForAttributes(string attributeType, Action<AttributeInfo> act)
		{
			foreach(AttributeInfo attr in ObjectFactory.GetAttributes(Attributes, attributeType))
				act(attr);
		}

		protected string GetArgumentFromAttribute(string attributeType, string argumentName)
		{
			AttributeInfo attr = ObjectFactory.GetAttributes(Attributes, attributeType).FirstOrDefault();
			if (attr != null)
			{
				AttributeArgumentInfo arg = attr.Arguments.FirstOrDefault(a => a.Name == argumentName);
				if (arg != null)
					return arg.Value;
			}
			return string.Empty;
		}

		protected string GetArgumentFromAttribute(string attributeType, int indexArgument)
		{
			AttributeInfo attr = ObjectFactory.GetAttributes(Attributes, attributeType).FirstOrDefault();
			if (attr != null)
			{
				AttributeArgumentInfo arg = (attr.Arguments as List<AttributeArgumentInfo>)[indexArgument];
				if (arg != null)
					return arg.Value;
			}
			return string.Empty;
		}

		public override string ToString()
		{

			System.Text.StringBuilder s = new System.Text.StringBuilder();

			s.Append(Name);

			if (this.ElementItems.Count() > 0)
			{

				s.Append("<");
				bool a = false;

				foreach (var item in this.ElementItems)
				{
					if (a)
						s.Append(", ");
					s.Append(item.ToString());
					a = true;
				}

				s.Append(">");

			}

			if (_rank > 0)
			{
				s.Append("[");
				for (int m = 1; m < _rank; m++)
					s.Append(",");
				s.Append("]");
			}

			return s.ToString();

		}

	}







    // Manager.tt from Damien Guard: http://damieng.com/blog/2009/11/06/multiple-outputs-from-t4-made-easy-revisited

    public class Block
    {
        public String Name;
        public int Start, Length;
        public string OutputPath;
        public string Fullname; 
        public EnvDTE.ProjectItem ParentProjectItem;
    }

    class Manager
    {

        private Block currentBlock;
        private List<Block> files = new List<Block>();
        private Block footer = new Block();
        private Block header = new Block();
        private ITextTemplatingEngineHost host;
        private StringBuilder template;
        protected List<Block> generatedFileNames = new List<Block>();
        public Func<FileInfo, bool> filterToDelete = file => file.Name.EndsWith(".generated" + file.Extension);
        protected EnvDTE.DTE dte;
        protected EnvDTE.ProjectItem templateProjectItem;
        protected EnvDTE.Project ContainingProject;

        public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template)
        {

            return (host is IServiceProvider) 
                ? new VSManager(host, template) 
                : new Manager(host, template);
        }

        public virtual bool FileOkToWrite(String fileName)
        {
            return true;
        }

        public Block StartNewFile(String name)
        {
            if (name == null)
                throw new ArgumentNullException("name");
            CurrentBlock = new Block { Name = name, OutputPath = Path.GetDirectoryName(host.TemplateFile), ParentProjectItem = templateProjectItem };
            return CurrentBlock;
        }

        public Block StartNewFile(String name, NodeItemFolder folder)
        {
            if (name == null)
                throw new ArgumentNullException("name");

            CurrentBlock = new Block { Name = name, OutputPath = folder.LocalPath, ParentProjectItem = folder.ProjectItem };
            return CurrentBlock;
        }

        public EnvDTE.Project GetCurrentProject()
        {
            return ContainingProject;
        }

        public void StartFooter()
        {
            CurrentBlock = footer;
        }

        public void StartHeader()
        {
            CurrentBlock = header;
        }

        public void EndBlock()
        {
            if (CurrentBlock == null)
                return;
            CurrentBlock.Length = template.Length - CurrentBlock.Start;
            if (CurrentBlock != header && CurrentBlock != footer)
                files.Add(CurrentBlock);
            currentBlock = null;
        }

        public virtual void Process(bool split)
        {
            if (split)
            {
                EndBlock();
                String headerText = template.ToString(header.Start, header.Length);
                String footerText = template.ToString(footer.Start, footer.Length);
                files.Reverse();
                foreach (Block block in files)
                {
                    block.Fullname = Path.Combine(block.OutputPath, block.Name);

                    StringBuilder sb = new StringBuilder(template.Length);
                    sb.Append(headerText);
                    sb.Append(template.ToString(block.Start, block.Length));
                    sb.Append(footerText);

                    generatedFileNames.Add(block);

                    if (!Directory.Exists(block.OutputPath))
                        Directory.CreateDirectory(block.OutputPath);

                    CreateFile(block.Fullname, sb.ToString());
                    template.Remove(block.Start, block.Length);
                }
            }
        }

        protected virtual void CreateFile(String fileName, String content)
        {
            if (IsFileContentDifferent(fileName, content))
                File.WriteAllText(fileName, content);
        }

        public virtual String GetCustomToolNamespace(String fileName)
        {
            return null;
        }

        public virtual String DefaultProjectNamespace
        {
            get { return null; }
        }

        protected bool IsFileContentDifferent(String fileName, String newContent)
        {
            return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
        }

        private Manager(ITextTemplatingEngineHost host, StringBuilder template)
        {
            this.host = host;
            this.template = template;
        }

        private Block CurrentBlock
        {
            get { return currentBlock; }
            set
            {
                if (CurrentBlock != null)
                    EndBlock();
                if (value != null)
                    value.Start = template.Length;
                currentBlock = value;
            }
        }

        private class VSManager : Manager
        {
            private Action<String> checkOutAction;
            private Action<Func<FileInfo, bool>, IEnumerable<Block>> projectSyncAction;
            private IVsQueryEditQuerySave2 queryEditSave;

            public override String DefaultProjectNamespace
            {
                get
                {
                    return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();
                }
            }

            public override String GetCustomToolNamespace(string fileName)
            {
                return dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();
            }

            public override void Process(bool split)
            {
                base.Process(split);
                projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(filterToDelete, generatedFileNames, null, null));
            }

            public override bool FileOkToWrite(String fileName)
            {
                CheckoutFileIfRequired(fileName);
                return base.FileOkToWrite(fileName);
            }

            protected override void CreateFile(String fileName, String content)
            {
                if (IsFileContentDifferent(fileName, content))
                {
                    CheckoutFileIfRequired(fileName);
                    File.WriteAllText(fileName, content);
                }
            }

            internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
                : base(host, template)
            {

                var hostServiceProvider = (IServiceProvider)host;

                if (hostServiceProvider == null)
                    throw new ArgumentNullException("Could not obtain IServiceProvider");

                dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
                if (dte == null)
                    throw new ArgumentNullException("Could not obtain DTE from host");

                checkOutAction = (String fileName) => dte.SourceControl.CheckOutItem(fileName);
                projectSyncAction = (Func<FileInfo, bool> filterToDelete, IEnumerable<Block> fileNames) => ProjectSync(filterToDelete, fileNames);
                queryEditSave = (IVsQueryEditQuerySave2)hostServiceProvider.GetService(typeof(SVsQueryEditQuerySave));

                this.templateProjectItem = this.dte.Solution.FindProjectItem(host.TemplateFile);
                this.ContainingProject = this.templateProjectItem.ContainingProject;

            }

            private static void ProjectSync(Func<FileInfo, bool> filterToDelete, IEnumerable<Block> keepFileNames)
            {

                var keepFileNameSet = new HashSet<String>(keepFileNames.Select(c => c.Fullname).ToList());

                foreach(Block block in keepFileNames)
                {

                    var projectFiles = new Dictionary<String, EnvDTE.ProjectItem>();
                    string filename1 = block.ParentProjectItem.get_FileNames(0);
                    var originalFilePrefix = Path.GetFileNameWithoutExtension(filename1) + ".";

                    // On enumere le contenu du repertoire
                    foreach (EnvDTE.ProjectItem projectItem in block.ParentProjectItem.ProjectItems)
                    {
                        string filename = projectItem.get_FileNames(0);
                        projectFiles.Add(filename, projectItem);
                    }

                    // Remove unused items from the project
                    foreach (var pair in projectFiles)
                        if (!keepFileNameSet.Contains(pair.Key) && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
                            if (filterToDelete(new FileInfo(pair.Key)))
                                pair.Value.Delete();

                    // Add missing files to the project
                    foreach (String fileName in keepFileNameSet)
                        if (!projectFiles.ContainsKey(fileName))
                            block.ParentProjectItem.ProjectItems.AddFromFile(fileName);

                }

            }

            private void CheckoutFileIfRequired(String fileName)
            {
                if (queryEditSave != null)
                {
                    uint pfEditVerdict;
                    queryEditSave.QuerySaveFile(fileName, 0, null, out pfEditVerdict);
                }
                else
                {
                    var sc = dte.SourceControl;
                    if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName)) 
                        checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
                }
            }
        }
    }

//   End of Manager.tt


    public static ManagerScope StartManager()
    {
        ManagerScope m = new ManagerScope();
        return m;
    }
    
    // Manager class records the various blocks so it can split them up

    public class ManagerScope : IDisposable
    {

        private static Manager manager;

        public ManagerScope()
        {
            manager = Manager.Create(serviceProvider as ITextTemplatingEngineHost, _generationEnvironment); 
        }


        public void SetFilterToDelete(Func<FileInfo, bool> filterToDelete)
        {

            manager.filterToDelete = filterToDelete;

        }

        public IDisposable StartHeader()
        {
            return new HeaderScope(manager);
        }

        public IDisposable StartFooter()
        {
            return new FooterScope(manager);
        }

        public void Dispose()
        {
            manager.Process(true);
        }

        public IDisposable NewFile(string filename)
        {
            return new ScriptFileScope(manager, filename);
        }

        public IDisposable NewFile(string filename, NodeItemFolder folder)
        {
            return new ScriptFileScope(manager, filename, folder);
        }

        public NodeProject GetCurrentProject()
        {
            var p = manager.GetCurrentProject();
            var sln = Solution();
            NodeProject prj = sln.GetProjects(c => c.Name == p.Name).FirstOrDefault();
            return prj;
        }

        public NodeProject GetProject(string projectName)
        {
            var sln = Solution();
            NodeProject prj = sln.GetProjects(c => c.Name == projectName).FirstOrDefault();
            return prj;
        }

    }

    class ScriptFileScope : IDisposable
    {
    
        private Manager manager;
        private Block block;

        public ScriptFileScope(Manager manager, string name)
        {
            string _name = AppliPatternToFilname(name);
            this.manager = manager;
            block = manager.StartNewFile(_name);
        }

        public ScriptFileScope(Manager manager, string name, NodeItemFolder folder)
        {
            string _name = AppliPatternToFilname(name);
            this.manager = manager;
            block = manager.StartNewFile(_name, folder);
        }

        private string AppliPatternToFilname(string name)
        {

            string _name;

            string e = Path.GetExtension(name);
            string mask = ".generated" + e;

            if (!name.EndsWith(mask))
            {
                e = mask;
                _name = Path.ChangeExtension(name, e);
            }
            else
                _name = name;

            return _name;
        }

        public void Dispose()
        {
            manager.EndBlock();
        }

    }

    class HeaderScope : IDisposable
    {
    
        private Manager manager;

        public HeaderScope(Manager manager)
        {
            this.manager = manager;
            manager.StartHeader();
        }

        public void Dispose()
        {
            manager.EndBlock();   
        }

    }

    class FooterScope : IDisposable
    {
    
        private Manager manager;

        public FooterScope(Manager manager)
        {
            this.manager = manager;
            manager.StartFooter();
        }

        public void Dispose()
        {
            manager.EndBlock();
        }

    }

#>