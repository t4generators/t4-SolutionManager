<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>
<#@ include file="..\..\..\VisualStudio.ParsingSolution\ParsingSolution.generated.t4" #>

<# 

	// get a reference to solution
	NodeSolution sln = ProjectHelper.GetContext().Solution();

	// get all object of type NodeItem (working file *.cs, *.vb, ...)
	List<NodeItem> list = sln.GetItem<NodeItem>().ToList();

	//System.Diagnostics.Debugger.Launch();

	foreach(NodeItem item in list)
	{

		// parse the list of code objects from 
		foreach(BaseInfo obj in item.GetClassItems())
		{
			
			ClassInfo cls = obj as ClassInfo;

			if (cls != null)
			{
				Write("class : " + cls.Name);

				if (cls.IsGeneric)
                    {
						Write("<");
						bool t1 = false;
                        foreach (GenericArgument item4 in cls.GenericArguments)
                        {
							if (t1)
								Write(",");
							Write(item4.Name);
							t1 = true;
                        }

						Write(">");

						
                        foreach (GenericArgument item4 in cls.GenericArguments)
                        {
							if (item4.HasConstraint)
                            {

								WriteLine("");

								Write("\t\t where " + item4.Name  + " : ");
							
								t1 = false;

								if (item4.IsClass)
                                {
									Write(" class");
									t1 = true;
                                }

                                foreach (string item5 in item4.Constraints)
                                {

									if (t1)
										Write(",");
									
									Write(" " + item5);

									t1 = true;

                                }

								if (item4.HasEmptyConstructor)
                                {
									
									if (t1)
										Write(",");

									Write(" new()");
                                
								}
							}
                        }
                    

					}
	
					WriteLine("");

				WriteLine("" + cls.DocComment);
				
				WriteLine("Methods : ");



				// Parse methods
				foreach(CodeFunctionInfo m in cls.GetMethods())
				{

					var t = m.Type.AsFullName.Trim();
					if (string.IsNullOrEmpty(t))
						t = "void";

					Write("\t" + t + " " + m.Name);

					if (m.IsGeneric)
                    {
						Write("<");
						bool t1 = false;
                        foreach (GenericArgument item3 in m.GenericArguments)
                        {
							if (t1)
								Write(",");
							Write(item3.Name);
							t1 = true;
                        }

						Write(">");
                    }

					Write("(");
					bool f = false;
                    foreach (MethodParamInfo p1 in m.Parameters)
                    {
						if (f)
							Write(", ");
						Write(p1.Type.AsFullName + " " + p1.Name);
						f = true;
					}
					WriteLine(")");
					
					if (m.IsGeneric)
                    {
						foreach (GenericArgument item4 in m.GenericArguments)
                        {
							if (item4.HasConstraint)
							{

								Write("\t\t where " + item4.Name  + " : ");
							
								bool t1 = false;

								if (item4.IsClass)
								{
									Write(" class");
									t1 = true;
								}

								foreach (string item5 in item4.Constraints)
								{

									if (t1)
										Write(",");
								
									Write(" " + item5);

									t1 = true;

								}

								if (item4.HasEmptyConstructor)
								{
								
									if (t1)
										Write(",");

									Write(" new()");
                            
								}
								WriteLine("");

							}
						}

                    }
				
				}




				// Parse proprerties
				WriteLine("");
				WriteLine("Properties : ");
				foreach(CodePropertyInfo p in cls.GetProperties())
				{
					TypeInfo t = p.Type;
					Write("\t" + t.AsFullName + " " + p.Name);
					WriteLine("");
				}




				// Parse events
				WriteLine("");
				WriteLine("Events : ");
				foreach(CodeEventInfo e in cls.GetEvents())
				{
					WriteLine("\t event " + e.Type.AsFullName  + " " + e.Name);


				}

			}


		}

	}


 #>